<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
    <title><![CDATA[Doctrine]]></title>
    <link href="https://www.doctrine-project.org/atom.xml" rel="self" />
    <link href="https://www.doctrine-project.org/" />
    <updated>2020-10-08T20:08:22-04:00</updated>
    <id>https://www.doctrine-project.org/</id>

            <entry>
            <title type="html"><![CDATA[Released doctrine/migrations 3.0-alpha]]></title>
            <link href="https://www.doctrine-project.org/2020/04/10/doctrine-migrations-3.0.html"/>
            <updated>2020-04-10T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2020/04/10/doctrine-migrations-3.0.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/doctrine/migrations"><code>doctrine/migrations</code> 3.0-alpha</a>
has been <a href="https://github.com/doctrine/migrations/tree/3.0.0-alpha1">published</a> on the 29th March 2020. </p>
<p>The upcoming 3.0 new major release is the result of almost 6 months of work and brings
a completely refactored/rewritten internal structure and some interesting new features.  </p>
<h3>Why a new major release?</h3>
<p>The <code>doctrine/migrations</code> <code>v1.x</code> codebase is 10 years old, and in the past years a lot of features have been added on top of its
initial architecture.<br />
<code>doctrine/migrations</code> <code>2.0</code> was released a bit more than a year ago. This major release did a bit of cleanup,
but the general structure remained the same.
In this schema you can see the dependencies between classes in the latest <code>2.3.x</code> branch:</p>
<div class="text-center">
<object width="70%" data="/images/posts/doctrine-migrations-3.0/complex-cycle-v2.svg" type="image/svg+xml"></object>
</div>
<p>The red lines are circular dependencies (and we already know that in software development circular dependencies are not
a good thing).</p>
<p>In <code>doctrine/migrations</code> <code>3.x</code>, most of the internal classes have been re-written and dependency injection has been
widely adopted.<br />
In this schema you can see the dependencies between classes in the latest <code>master</code> branch (release v3.0):</p>
<div class="text-center">
<object width="70%" data="/images/posts/doctrine-migrations-3.0/complex-cycle-v3.svg" type="image/svg+xml"></object>
</div>
<p>As you can see the circular dependencies are gone. This has been possible thanks to extensive use of dependency injection
and applying SOLID principles.
To reduce future backward incompatibilities, many classes have been marked as <code>final</code> or as <code>@internal</code> while
keeping the functionalities intact. Extensibility is still possible by using dependency injection and providing
classes implementing dedicated interfaces.</p>
<p><em>These schemas have been generated using <a href="https://github.com/mamuz/PhpDependencyAnalysis">PhpDependencyAnalysis</a>
with <a href="https://gist.github.com/goetas/e6343746a6ccd6ebb191cbbd675898e0">this configuration</a>.</em></p>
<h3>New features and improvements</h3>
<p>Beside the code quality improvements, there is a a long list of improvements (see below), but
<strong>the main user-facing feature is the ability to collect migrations from multiple folders/namespaces and
to specify dependencies between migrations.</strong></p>
<p>Here a (probably not complete) list of improvements implemented in the upcoming <code>3.0</code> release: </p>
<ul>
<li>ability to collect migrations from multiple folders/namespaces and to specify dependencies between migrations</li>
<li><code>doctrine/migrations</code> will write to your database only when running migrations
(previously the metadata table was created on the very first command run even if it was a read-only command)</li>
<li>Output verbosity can be controlled using the <code>-v</code>, <code>-vv</code> or <code>-vvv</code> command parameters</li>
<li>Use of dependency injection allows you to decorate/replace most services</li>
<li>Removed usage of console helpers to provide the connection or entity manager in favor of dependency injection</li>
<li>Introduced <code>migrations:list</code> command to list the available/executed migrations</li>
<li>Introduced <code>migrations:sync-metadata-storage</code> command to explicitly update the metadata schema in case a newer version
introduces changes to the metadata table</li>
<li>Multiple migrations can be passed to the <code>migrations:execute</code> command</li>
<li>More organized output of the <code>migrations:status</code> command</li>
<li>Configurations and Dependency Factory are read-only during the migration process</li>
<li>The <code>down()</code> migration is optional now</li>
<li>Multi-namespace migrations</li>
<li>Custom migrations metadata storage</li>
<li>Added warning when using the <code>migrations:diff</code> if there are not executed migrations</li>
</ul>
<h3>Backward compatibility</h3>
<p>In <code>doctrine/migrations</code> <code>3.0</code> a lot of things changed, but for end-users most of the things will look the same.
Your migration files do not need any update.</p>
<p>You will have to change  your configuration files, as the configuration format has changed.
The <a href="https://www.doctrine-project.org/projects/doctrine-migrations/en/latest/reference/configuration.html#configuration">official documentation</a> contains more information about these changes.
This documentation should be particularly helpful if you did also some custom integration with third party frameworks
or libraries.</p>
<p>If you wrote custom event listeners, please take a look at them as the method signatures for event listeners have been updated.</p>
<h3>Symfony Integration</h3>
<p>If you are using <a href="https://github.com/doctrine/DoctrineMigrationsBundle">DoctrineMigrationsBundle</a> then things are even
easier: the 2.3.0 release introduced some deprecation notices and if you have already solved them
your configuration is already compatible. If you want you can have a look to the latest configuration format
available on the <a href="https://www.doctrine-project.org/projects/doctrine-migrations-bundle/en/3.0/index.html#configuration">official documentation</a>.
You can look more in detail to which changes are needed in the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/blob/master/UPGRADE.md">upgrading</a> document.</p>
<h3>What is next</h3>
<p>In the upcoming weeks, we will be preparing the first beta release and starting the process to reach a stable release.
<strong>To be able to deliver a good stable release it is important that you test the pre-release and share your feedback!</strong></p>
<p>To try the alpha version, you can run:</p>
<pre><code class="language-bash">composer require 'doctrine/migrations:^3.0@alpha'</code></pre>
<p>If you are using Symfony: </p>
<pre><code class="language-bash">composer require 'doctrine/doctrine-migrations-bundle:^3.0@alpha' 'doctrine/migrations:^3.0@alpha'</code></pre>
<p>You can be also more brave trying the development versions by specifying <code>@dev</code> instead of <code>@alpha</code>
when requiring the composer dependencies above.</p>
<p>You can also have a look at the <a href="https://github.com/doctrine/migrations/releases/tag/3.0.0-alpha1">release notes</a>
and the <a href="https://github.com/doctrine/migrations/blob/3.0.0-alpha1/UPGRADE.md">upgrading</a> document.</p>
<p>Similarly you can also have a look at the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/releases/tag/3.0.0-alpha.1">release notes</a>
and the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/blob/3.0.0-alpha.1/UPGRADE.md">upgrading</a> document for the Symfony bundle.</p>
<p>In the alpha release, breaking changes are still possible.
In the beta, release breaking changes are possible but will happen
only if we will find very unexpected behaviors.
When the alpha and beta phase will be completed, a stable version will be made available. </p>
<h2>Note</h2>
<p>This post was initially published on <a href="https://www.goetas.com/blog/released-doctrinemigrations-30-alpha/">https://www.goetas.com/blog/released-doctrinemigrations-30-alpha/</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.3.0 and 2.0.0-RC2 released]]></title>
            <link href="https://www.doctrine-project.org/2019/09/30/mongodb-odm-1.3.0-and-2.0.0-RC2.html"/>
            <updated>2019-09-30T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2019/09/30/mongodb-odm-1.3.0-and-2.0.0-RC2.html</id>
            <content type="html"><![CDATA[<p>The Doctrine team is proud to announce that MongoDB ODM 1.3.0 and 2.0.0-RC2 have
been released. These releases are the culmination of a long effort to migrate
the ODM away from the legacy <code>mongo</code> extension to the new MongoDB driver
(<code>mongodb</code> extension and PHP library). This results in a number of BC breaks for
users, but will enable us to add many new features in future releases, among
them support for multi-document transactions.</p>
<p>MongoDB ODM 1.3.0 is a compatibility release targeted for users of the legacy
extension that want to migrate to MongoDB ODM 2.0. It helps identify BC breaks
by throwing deprecation notices and offering a forward compatibility layer where
possible. To efficiently find usages of deprecated code, you can use the PHPUnit
bridge developed by Symfony
(<a href="https://github.com/symfony/phpunit-bridge">symfony/phpunit-bridge</a>) which logs
all deprecation notices encountered during a run of PHPUnit. You can read more
about this component in the
<a href="https://symfony.com/doc/current/components/phpunit_bridge.html">Symfony documentation</a>.</p>
<p>MongoDB ODM 2.0.0RC-2 is the recommended package to use for those starting new
projects with MongoDB ODM. It ensures that you use the modern API for ODM
without having to worry about deprecations. While this is still a release
candidate, it is planned to make this version the next stable MongoDB ODM
release.</p>
<h1>What’s new in MongoDB ODM 2.0?</h1>
<p>Most importantly, this version no longer uses the legacy <code>mongo</code> extension. That
extension is no longer maintained and does not support server versions beyond
MongoDB 3.0. The new MongoDB driver ensures that MongoDB ODM can leverage
features and improvements contained in newer MongoDB versions, such as support
for multi-document transactions, retryable reads, retryable writes, change
streams, and much more.</p>
<p>Changing the driver also means significant changes to some APIs. Most
importantly, the GridFS API has been rewritten from scratch to conform with
MongoDB’s GridFS spec for drivers. If you’ve used GridFS before, this will be a
big change for you, but the new API is much simpler and cleaner to use. Check
out the
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/storing-files-with-mongogridfs.html#storing-files-with-gridfs">GridFS documentation</a>
to find out how to use the new API. Unfortunately, we cannot provide a forward
compatibility layer for this, as re-implementing this API atop the legacy driver
is not feasible.</p>
<p>Lazy reference support has been changed completely and no longer uses proxy
objects from the deprecated doctrine/common library. Instead, it builds on
<code>ocramius/proxy-manager</code>, which gives us access to more advanced features like
partial proxy loading, which we will start leveraging in future releases.</p>
<p>In 2.0 we dropped support for the YAML mapping of documents. This step was
necessary to both reduce the complexity of the code base and lower the burden of
maintaining multiple mapping drivers. If you are currently using YAML mappings,
we provide a console command to migrate YAML mappings to the XML format. We are
currently working on an alternative that allows for a more flexible mapping
configuration system, but this is not ready yet and will only be provided in a
future 2.x release.</p>
<h1>Migrating to MongoDB ODM 2.0</h1>
<p>If you are using MongoDB ODM 1.x, the upgrade consists of multiple steps. First,
ensure that you are fulfilling the necessary requisites for MongoDB ODM 2.0:</p>
<ul>
<li>PHP version 7.2 or newer</li>
<li>ext-mongodb 1.5.0 or newer</li>
<li>mongodb/mongodb library 1.4.0 or newer</li>
<li>MongoDB 3.0 or newer</li>
</ul>
<p>If you are already running PHP 7, you will most likely already be running
ext-mongodb as the legacy extension is not available for PHP 7. If you are still
running PHP 5.x, it is recommended that you migrate to PHP 7 before attempting
to use a newer ODM version. You can do so by following the instructions on
running ODM 1.x on PHP 7.</p>
<p>Once you fulfill all dependencies, the first step is updating to the latest 1.3
release of MongoDB ODM. If you are using Symfony, you also need to upgrade the
ODM bundle to its latest
<a href="https://github.com/doctrine/DoctrineMongoDBBundle/releases/tag/3.6.0">3.6 version</a>.
Once this is done, you can start fixing any deprecation notices that you find.
This should be a familiar process for any existing Symfony users. We tried to
provide compatibility layers where possible; unfortunately, we could not do so
in all cases.</p>
<p>The next step is upgrading to ODM 2.0 directly. For many users, this step
shouldn’t be a problem thanks to the compatibility layer in 1.x. There may be
some necessary changes depending on the features you use (e.g. GridFS).</p>
<h1>What’s next for MongoDB ODM</h1>
<p>During the past few years, we focussed our limited development time almost
exclusively on the driver migration, which came at the expense of supporting new
features in MongoDB. We plan to add support for many of those features in future
releases. You can get an overview of what’s planned by checking the roadmap. If
you are looking for a specific feature, please let us know in the issue tracker.</p>
<p>While not exhaustive or guaranteed, these are some of the features we plan to
implement in future releases:</p>
<ul>
<li>Support for multi-document transactions (on-demand and implicit while flushing
the Document Manager)</li>
<li>Support for new aggregation pipeline stages and operators</li>
<li>Support for the $expr query operator</li>
<li>Support for aggregation pipelines in update operations</li>
<li>Support for reading documents from views instead of collections</li>
<li>Atomic updates for collections using new array update operators</li>
</ul>
<h1>Support timeline</h1>
<p>With these releases, we’re also introducing our new support timeline. Along with
the two releases announced above, we are also releasing the end-of-life release
for MongoDB ODM 1.2. We will not support MongoDB ODM 1.2 any more and encourage
users to upgrade to 1.3. Since 1.3 has no additional requirements over 1.2,
upgrading should be possible for all users of ODM 1.2.</p>
<p>MongoDB ODM 1.3 will be supported for at least 6 months after the first stable
release of ODM 2.0. We will communicate this date when releasing ODM 2.0. After
those 6 months, we will either drop support for ODM 1.3 or extend it for another
3 months, depending on the adoption rate of ODM 2.0. We are aware that the
number and kind of BC breaks for 2.0 pose a significant challenge for many
users, which is why we don’t want to force people to rush into this update.</p>
<p>During the support phase for MongoDB ODM 1.3, we will also continue to provide
bug fixes to the MongoDB Abstraction Layer that is used by MongoDB ODM 1.x. This
project will reach end-of-life at the same time as MongoDB ODM 1.3, and will no
longer be supported beyond that. We encourage users that depend on this library
to switch to using the MongoDB PHP Library, which is part of the official
MongoDB driver for PHP.</p>
<h1>Contributing to MongoDB ODM</h1>
<p>We are currently looking for contributors. This doesn’t necessarily mean
implementing new features or merging pull requests. Reporting or triaging
issues, requesting features, and reporting bugs are all extremely important and
helps us deliver better software!</p>
<h1>Getting help</h1>
<p>The documentation can be found on the website:
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/index.html">https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/index.html</a>.
To get support, contact us via the #mongodb-odm channel within the Doctrine
Slack. If you believe you have found a bug, please file a bug report on GitHub.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine Webinars]]></title>
            <link href="https://www.doctrine-project.org/2019/05/30/doctrine-webinars.html"/>
            <updated>2019-05-30T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2019/05/30/doctrine-webinars.html</id>
            <content type="html"><![CDATA[<p>As mentioned in the <a href="/2019/05/21/monetizing-open-source.html">Monetizing Open Source</a> blog post,
Doctrine will be regularly organizing online <a href="/events.html">webinars</a> hosted with <a href="https://zoom.us/">Zoom</a>.
You can join from anywhere in the world with a laptop and an internet connection. We will
have topics presented by Doctrine core team members and members of the community.</p>
<p>To get things started we have a few webinars scheduled for the next few months:</p>
<ul>
<li><a href="/events/2/doctrine-for-beginners.html">Doctrine for Beginners</a> on June 25th by Jonathan Wage</li>
<li><a href="/events/3/getting-started-with-doctrine-mongodb-odm.html">Getting Started with Doctrine MongoDB ODM</a> on July 16th by Andreas Braun</li>
<li><a href="/events/1/php-internals-for-the-inquisitive-developer.html">PHP Internals for the Inquisitive Developer</a> on September 10th by Jeremy Mikola</li>
</ul>
<p>Don't see something that you are interested in? <a href="https://www.doctrine-project.org/events/suggest.html">Suggest</a> an event topic you would like to see and we will see what we can do. We will be publishing new events in the coming weeks so check back soon!</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Monetizing Open Source]]></title>
            <link href="https://www.doctrine-project.org/2019/05/21/monetizing-open-source.html"/>
            <updated>2019-05-21T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2019/05/21/monetizing-open-source.html</id>
            <content type="html"><![CDATA[<p>In our quest to make Doctrine financially sustainable, we have created
Doctrine Company, LLC under which the team can conduct business. We've had a strong
10 years of open source success but we believe that in order for Doctrine to be
truly sustainable and to last another decade, we need to diversify and monetize
the project. It is our goal to be able to generate enough money through the project
to fund full or part time work on the project. Below you will find details of some
of our monetization efforts.</p>
<h2>Patreon</h2>
<p>Patreon is a platform that allows open source maintainers, artists, creators, etc. to create
relationships with their users and offer them benefits for becoming a patron.</p>
<p>If you would like to make a donation to the project, Patreon is the place to do it.
Depending on the tier, we offer a few different benefits:</p>
<ul>
<li>A mention on Twitter.</li>
<li>Your name and website link on the Doctrine website.</li>
<li>Priority responses to Stack Overflow or GitHub issues/PRs.</li>
<li>Placement on a <a href="/partners.html">Partners</a> page on the Doctrine website, with your logo, link, and a paragraph advertising your company's services.</li>
</ul>
<p><a href="https://www.patreon.com/phpdoctrine">Become a Patreon</a> of Doctrine today!</p>
<h2>Consulting</h2>
<p>Under the Doctrine Company, we are providing <a href="/consulting.html">consulting and training</a>
services to companies that use PHP. The services we offer are not limited to Doctrine itself.
Our team specializes in producing high quality PHP. Whether you are starting a new project or
modernizing a legacy application, we can help your team level up their skills with tools
like the following:</p>
<ul>
<li><a href="/projects/dbal.html">Doctrine DBAL</a> - Connect to your favorite RDBMS using Doctrine's database abstraction library.</li>
<li><a href="/projects/migrations.html">Doctrine Database Migrations</a> - Safely manage your database schema and keep it up to date.</li>
<li><a href="/projects/orm.html">Doctrine ORM</a> - Represent your domain model cleanly with plain old PHP objects and ensure the integrity of your data.</li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> - Keep aesthetic debates out of your code reviews by adopting a coding standard and enforcing it in your build process. We can help integrate Doctrine's own <a href="/projects/coding-standard.html">coding standard</a> into your project or help codify your own.</li>
<li><a href="https://psalm.dev/">Psalm</a> / <a href="https://github.com/phpstan/phpstan">PHPStan</a> - Statically analyze your codebase and find bugs that would otherwise only be found at runtime in production.</li>
</ul>
<p>If you are interested, take a look at our <a href="/consulting.html">Consulting</a> page or contact
us at <a href="mailto:consulting@doctrine-project.org">consulting@doctrine-project.org</a> for more
information.</p>
<h2>Events</h2>
<p>We will host regular monthly webinars using <a href="https://zoom.us/">Zoom</a>. Each month we will have different topics
presented to you by members of the Doctrine Core team or greater PHP community. We already have
some great topics lined up for the next few months:</p>
<ul>
<li><a href="/events/2/doctrine-for-beginners.html">Doctrine for Beginners on June 25th</a></li>
<li><a href="/events/3/getting-started-with-doctrine-mongodb-odm.html">Getting Started with Doctrine MongoDB ODM on July 16th</a></li>
<li><a href="/events/1/php-internals-for-the-inquisitive-developer.html">PHP Internals for the Inquisitive Developer on September 10th</a></li>
</ul>
<h2>Tidelift</h2>
<p><a href="https://tidelift.com">Tidelift</a> is a managed open source subscription service backed by
creators and maintainers. Development teams get better maintained open source. Maintainers
get paid.</p>
<p>We have partnered with Tidelift as a maintainer to guarantee a high level of maintenance for their
customers. In return, Tidelift pays Doctrine maintainers a percentage of what the customer pays.
Tidelift is attempting to create a marketplace of open source maintainers and customers with the
goal of providing higher levels of confidence for commercial entities when using open source. This
can sometimes be one of the biggest challenges for using open source in the corporate world.
Tidelift is taking a unique approach to solving this problem and we are excited to be a part of it!</p>
<h2>Carbon Ads</h2>
<p>One of the most valuable assets we have besides software is our website and the traffic we
receive every month. You may have noticed some subtle ad placements on our website. These
text-based ads are provided by <a href="https://www.carbonads.net/">Carbon Ads</a> which is an ad network
optimized for reaching designers and developers. We understand ads can be annoying and we hope that
our users understand the trade-off we've made by choosing to place ads on our website.</p>
<h2>Partners</h2>
<p>Finally, we are partnering with commercial entities and other projects that use Doctrine to cross
promote each other. Through our partner network we hope to introduce our users to vetted services
and offerings from which they can benefit. Thanks to our <a href="/partners.html">Partners</a> for supporting
Doctrine.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Migrations 2.0 Stable Released]]></title>
            <link href="https://www.doctrine-project.org/2019/01/09/migrations-2-0-stable.html"/>
            <updated>2019-01-09T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2019/01/09/migrations-2-0-stable.html</id>
            <content type="html"><![CDATA[<p>Today we are very excited to announce the stable release of Doctrine Migrations 2.0.
Almost 10 years ago on Mar 23, 2010, the <a href="https://github.com/doctrine/migrations/commit/8f198ef623051a5eeb21d93bfc7a8a49efbe9d63">first commit</a> of the 1.0 codebase was created.
The history of the Doctrine Migrations project actually even goes back further to the
days of Doctrine1 ORM but this was before the days of GitHub, Composer, etc and I think
some of that history has been lost. It is amazing to look back over the last decade at
how much the PHP eco-system has changed. It makes us appreciate all the great tools we
have, even with all their flaws.</p>
<h2>What is in 2.0?</h2>
<p>The 2.0 release should be a relatively easy upgrade for most people. The primary goal of the
2.0 release was to modernize the codebase according to Doctrine Coding Standards, PHPStan and
all of the other standardized Doctrine project infrastructure that has evolved over the last
few years. This will ensure the project is alive and relevant for another decade.</p>
<p>In addition to upgrading the infrastructure of the project, it came with a few new nice features:</p>
<ul>
<li><a href="https://github.com/doctrine/migrations/pull/724">724: Allow migrations in sub namespace to be loaded if the migration is in the namespace configured.</a> thanks to @jwage</li>
<li><a href="https://github.com/doctrine/migrations/pull/693">693: Allow Migration Classes to be in Multiple Namespaces</a> thanks to @chrisguitarguy and @liquorvicar</li>
<li><a href="https://github.com/doctrine/migrations/pull/683">683: Implement all or nothing transaction strategy for migrations.</a> thanks to @jwage and @stof</li>
</ul>
<p>You can view the full changelog in the release on <a href="https://github.com/doctrine/migrations/releases/tag/v2.0.0">GitHub</a>.</p>
<p>This release contains <strong>36</strong> resolved issues with <strong>71</strong> pull requests coming from <strong>18</strong> different
contributors. Thanks to the following people for their help with this release:</p>
<ul>
<li><a href="https://github.com/jwage">@jwage</a></li>
<li><a href="https://github.com/theofidry">@theofidry</a></li>
<li><a href="https://github.com/localheinz">@localheinz</a></li>
<li><a href="https://github.com/Majkl578">@Majkl578</a></li>
<li><a href="https://github.com/greg0ire">@greg0ire</a></li>
<li><a href="https://github.com/lcobucci">@lcobucci</a></li>
<li><a href="https://github.com/emodric">@emodric</a></li>
<li><a href="https://github.com/PowerKiKi">@PowerKiKi</a></li>
<li><a href="https://github.com/MasterOdin">@MasterOdin</a></li>
<li><a href="https://github.com/Piskvor">@Piskvor</a></li>
<li><a href="https://github.com/aik099">@aik099</a></li>
<li><a href="https://github.com/chrisguitarguy">@chrisguitarguy</a></li>
<li><a href="https://github.com/stof">@stof</a></li>
<li><a href="https://github.com/bostjan">@bostjan</a></li>
<li><a href="https://github.com/weaverryan">@weaverryan</a></li>
<li><a href="https://github.com/SlvrEagle23">@SlvrEagle23</a></li>
<li><a href="https://github.com/jaikdean">@jaikdean</a></li>
<li><a href="https://github.com/liquorvicar">@liquorvicar</a></li>
</ul>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Phasing out Doctrine Common &amp; release of DBAL 2.8 and ORM 2.6.2]]></title>
            <link href="https://www.doctrine-project.org/2018/07/12/common-2-9-and-dbal-2-8-and-orm-2-6-2.html"/>
            <updated>2018-07-12T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2018/07/12/common-2-9-and-dbal-2-8-and-orm-2-6-2.html</id>
            <content type="html"><![CDATA[<h3>Common 2.9 and phasing out the package</h3>
<p>As another step in the ongoing effort to eliminate <code>doctrine/common</code>,
there are now three new separate Doctrine packages:</p>
<ul>
<li><a href="https://github.com/doctrine/persistence"><code>doctrine/persistence</code></a></li>
<li><a href="https://github.com/doctrine/event-manager"><code>doctrine/event-manager</code></a></li>
<li><a href="https://github.com/doctrine/reflection"><code>doctrine/reflection</code></a></li>
</ul>
<p>This release introduces the following deprecations:</p>
<ul>
<li><code>Doctrine\Common\Proxy</code> component is deprecated, use
<a href="https://github.com/ocramius/ProxyManager"><code>ocramius/proxy-manager</code></a> instead;</li>
<li><code>Doctrine\Common\Util\Debug</code> is deprecated, use
<a href="https://github.com/symfony/var-dumper"><code>symfony/var-dumper</code></a> instead;</li>
<li><code>Doctrine\Common\Lexer</code> is deprecated, use <code>Doctrine\Common\Lexer\AbstractLexer</code>
from <a href="https://github.com/doctrine/lexer"><code>doctrine/lexer</code></a> or migrate to
<a href="https://github.com/hoaproject/Compiler">hoa/compiler</a> instead;</li>
<li><code>Doctrine\Common\Util\Inflector</code> is deprecated, use <code>Doctrine\Common\Inflector\Inflector</code>
from <a href="https://github.com/doctrine/inflector"><code>doctrine/inflector</code></a> instead;</li>
<li><code>Doctrine\Common\Util\ClassUtils</code> is deprecated without replacement;</li>
<li><code>Doctrine\Common\Version</code> is deprecated, refrain from checking Common version at runtime;</li>
<li><code>Doctrine\Common\CommonException</code> is deprecated without replacement.</li>
</ul>
<p>In addition to that, there will be no <code>doctrine/common</code> 3.0 and the package
will be gradually phased out.</p>
<p>Version 2.x will be maintained at least until ORM 3.0 is released, ensuring
compatibility with the latest PHP and providing bugfixes, but it will
no longer ship any new features.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/common/releases/tag/v2.9.0">visit GitHub</a>.</p>
<h3>DBAL 2.8.0</h3>
<p>DBAL 2.8.0 is a minor release of Doctrine DBAL that aggregates over
30 fixes and improvements developed over the last 3 months.</p>
<p>The dependency on <code>doctrine/common</code> is removed. DBAL now
depends on <code>doctrine/cache</code> and <code>doctrine/event-manager</code> instead.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/dbal/releases/tag/v2.8.0">visit GitHub</a>.</p>
<h3>ORM 2.6.2</h3>
<p>ORM 2.6.2 comes as a regular bugfix release.</p>
<p>It no longer uses the long ago deprecated Lexer and Inflector from <code>doctrine/common</code>.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/orm/releases/tag/v2.6.2">visit GitHub</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Website]]></title>
            <link href="https://www.doctrine-project.org/2018/04/06/new-website.html"/>
            <updated>2018-04-06T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2018/04/06/new-website.html</id>
            <content type="html"><![CDATA[<p>In 2007 Doctrine got its first official website at
<a href="https://www.phpdoctrine.org/">phpdoctrine.org</a>. Before that, the
website was an instance of <a href="https://trac.edgewall.org/">Trac</a> which also
served as our documentation, issue tracker and project management tool.</p>
<p>The new website design was created by <a href="https://phuson.com/">Phu Son
Nguyen</a> who worked at Yahoo! at the time. It was a
huge step forward for the Doctrine Project and it gave us 10 solid
years!</p>
<p>Fast-forward and today we are happy to be launching a new foundation for
our website and documentation. In addition to the new look, here are
some new features:</p>
<ul>
<li>GitHub Edit links on all documentation pages to make it easy to
contribute fixes when you come across something that could be
improved.</li>
<li>Automated deploys with GitHub Pages. Simply create a pull request
and it will be deployed to
<a href="https://staging.doctrine-project.org">https://staging.doctrine-project.org</a>.
Merges to master automatically deploy to
<a href="https://www.doctrine-project.org">https://www.doctrine-project.org</a>.</li>
<li>Search powered by <a href="https://www.algolia.com/">Algolia</a>.</li>
<li>Mobile friendly.</li>
<li>Documentation supports multiple versions.</li>
<li>Documentation user experience improvements.</li>
<li>HTTPS</li>
</ul>
<p>We hope that this helps improve the experience and make it easier to
contribute. The code for the site is open source and can be found
<a href="https://github.com/doctrine/doctrine-website/">here</a>. If you want to
contribute to the documentation for a project, you can find the docs in
a folder named <code>/docs</code> in the root of the project repository.
<a href="https://github.com/doctrine/orm/tree/master/docs">Here</a> is the
ORM for example.</p>
<p>If you discover any issues, please report them on the <a href="https://github.com/doctrine/doctrine-website/issues">GitHub
Issue</a> tracker for
the project.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine ORM 2.6 and Next (3.0)]]></title>
            <link href="https://www.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html"/>
            <updated>2017-12-21T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine ORM <a href="https://github.com/doctrine/orm/releases/tag/v2.6.0">2.6.0</a>.</p>
<h1>ORM 2.6.0</h1>
<p>This release contains almost 3 years of active development and it
provides several improvements and fixes, including:</p>
<ul>
<li>Better commit order calculation</li>
<li>More stable second level cache</li>
<li>Strict testing and quality control</li>
<li>PHP 7.1+ requirement</li>
</ul>
<p><a href="https://github.com/doctrine/orm/releases/tag/v2.6.0">changelog</a>.</p>
<h1>Next?</h1>
<p>This release marks the feature freeze of the 2.x version.</p>
<p>If you need to improve please work on the develop branch that will
become the 3.0 branch in the coming days. The changes are already too
numerous to easily rebase a feature from the 2.x branch to the develop
one.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.2.0 and 1.1.7 Released]]></title>
            <link href="https://www.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7.html"/>
            <updated>2017-10-24T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
ODM <a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.2.0">1.2.0</a>
and <a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.7">1.1.7</a>.</p>
<h1>MongoDB ODM 1.1.7</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/1.1.x/CHANGELOG-1.1.md#117-2017-10-23">changelog</a>.
A full list of issues and pull requests included in this release may be
found in the <a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.1.7">1.1.7
milestone</a>.</p>
<h1>What is new in 1.2.0?</h1>
<p>Doctrine MongoDB ODM 1.2.0 introduces the following new features:</p>
<ul>
<li>The <code>readOnly</code> mapping option allows you to map immutable documents.</li>
<li>With <code>slaveOkay</code> being deprecated, you can now specify a
<code>readPreference</code> for your documents. This <code>readPreference</code> will
automatically be applied to all queries for those mapped documents.</li>
<li>With <code>dbRef</code> only offering limited support in aggregation pipeline
queries, there's a new reference storage strategy called <code>ref</code> that
stores references as objects (without &quot;\$&quot;-prefixed field names),
allowing you to use it with discriminators and aggregation pipeline
queries.</li>
<li>When mapping inverse references, you may now specify fields that
will be primed when the reference is resolved. This saves you from
writing a dedicated repository method for the sole purpose of
priming references.</li>
<li>The <code>odm:schema:validate</code> command validates the document mapping to
help you spot mistakes.</li>
<li>A new builder for aggregation pipeline queries, including support
for marshalling results into read-only documents.</li>
<li>Query result documents that can be used to hydrate results from an
aggregation pipeline query. These documents cannot be written back
to the database.</li>
</ul>
<h1>Upgrading to 1.2.0</h1>
<p>The new version requires PHP 5.6. Running on PHP 7+ requires the use of
a polyfill for the legacy driver, e.g.
<a href="https://github.com/alcaeus/mongo-php-adapter">mongo-php-adapter</a>. When
running on PHP 5.6, MongoDB ODM requires version 1.6.7 or newer of the
legacy MongoDB driver.</p>
<p>Several features have been deprecated in this release and will be
dropped in the 2.0 release. To see this, please view the <a href="https://github.com/doctrine/mongodb-odm/blob/1.2.x/UPGRADE-1.2.md">UPGRADE
document</a>.</p>
<h1>Installation</h1>
<p>You can install the new version of MongoDB ODM by using Composer and the
following <code>composer.json</code> contents:</p>
<pre><code class="language-{.sourceCode">{
    "require": {
        "doctrine/mongodb-odm": "^1.2.0"
    }
}</code></pre>
<h1>Stability and upcoming releases</h1>
<p>As of today, Doctrine MongoDB ODM <code>1.2.0</code> is the stable distribution.
There is no release schedule for an upcoming version yet.</p>
<p><code>1.1.7</code> is the last release of the <code>1.1.x</code> development line and will no
longer receive bug fixes. Instead, we will focus on developing MongoDB
ODM 2.0 with native support for the new MongoDB driver. This release
will require at least PHP 7.1 and contain several BC breaking changes.
To ease the migration process, we will release a <code>1.3.0</code> which will be
backwards compatible to the <code>1.2.x</code> line and only deprecate features to
be removed in 2.0. The <code>1.x</code> line of MongoDB ODM will not receive any
new features.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 7.1 requirement for Doctrine packages]]></title>
            <link href="https://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html"/>
            <updated>2017-07-25T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html</id>
            <content type="html"><![CDATA[<p>A few days ago, the Doctrine team released new versions of many
packages, dropping support for PHP 5.6 and 7.0, as well as HHVM. The
affected packages are:</p>
<ul>
<li>doctrine/common 2.8.0</li>
<li>doctrine/dbal 2.6.0</li>
<li>doctrine/collections 1.5.0</li>
<li>doctrine/inflector 1.2.0</li>
<li>doctrine/cache 1.7.0</li>
<li>doctrine/instantiator 1.1.0</li>
<li>doctrine/annotations 1.5.0</li>
</ul>
<p>Since many people are encountering issues with these updates, here are a
few suggestions to ensure your code continues working as usual.</p>
<h1>Composer version constraints</h1>
<p>Chances are your version constraints in <code>composer.json</code> look something
like this:</p>
<pre><code class="language-{.sourceCode">{
    "require": {
        "doctrine/orm": "^2.5"
    }
}</code></pre>
<p>The <code>^2.5</code> constraint resolves to: <code>&gt;= 2.5.0 &amp;&amp; &lt;= 2.999999.999999</code>.
This is intended: our projects all follow <a href="https://semver.org/">Semantic
Versioning</a>, so you can safely install a new minor
version without having to fear BC breaks.</p>
<p>When determining what version to install, composer employs a SAT solver
to make sure all dependencies are fulfilled. In our example above, the
SAT solver finds a version newer than 2.5 that satisfies all
requirements.</p>
<h1>Making sure you get a compatible version</h1>
<p>When you run <code>composer update</code> the next time, you'll automatically
receive updates for the packages mentioned above, provided that you are
running on PHP 7.1. If you are running an older PHP version, composer
will not install a version that requires PHP 7.1, since its requirements
are not fulfilled.</p>
<p>A common problem is people running a newer PHP version on their
developer machines than on their production servers. In this case,
running <code>composer update</code> on a developer machine (with PHP 7.1) might
happily pull in an update that simply won't work when deployed on a
production machine running PHP 5.6.</p>
<p>To make sure this doesn't happen to you, there are two choices:</p>
<ul>
<li>run <code>composer update</code> on a machine with the same PHP version that
you use in production</li>
<li>use the
<a href="https://getcomposer.org/doc/06-config.md#platform">platform.config</a>
config setting in <code>composer.json</code> to override your local PHP
version.</li>
</ul>
<h1>Why dropping PHP support in a minor version is not a BC break</h1>
<p>One question we frequently hear is, &quot;isn't dropping support for a PHP
version a BC break&quot;? In a nutshell, no. A BC break happens when there is
an incompatible change that your package manager can't handle. For
example, changing a method signature in a minor version is a no-go,
since the composer version constraints mentioned above assume any minor
upgrade can safely be used.</p>
<p>However, when we drop support for an older version of PHP, composer will
not consider the new version if the PHP version requirement is no longer
fulfilled. Thus, you won't end up with a fatal error due to a wrong
method signature, you just won't get the new version.</p>]]></content>
        </entry>
    </feed>
