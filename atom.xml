<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
    <title><![CDATA[Doctrine]]></title>
    <link href="https://www.doctrine-project.org/atom.xml" rel="self" />
    <link href="https://www.doctrine-project.org/" />
    <updated>2021-12-13T19:55:14-05:00</updated>
    <id>https://www.doctrine-project.org/</id>

            <entry>
            <title type="html"><![CDATA[New Release: Doctrine MongoDB ODM 2.3 with Attributes, JSON Schema Validation, and more]]></title>
            <link href="https://www.doctrine-project.org/2021/12/04/mongodb-odm-2.3.html"/>
            <updated>2021-12-04T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/12/04/mongodb-odm-2.3.html</id>
            <content type="html"><![CDATA[<p>We have released a new minor version 2.3 of Doctrine MongoDB ODM, the first version
with support for using PHP 8 Attributes as a new driver for mapping documents
and several other changes. <a href="https://github.com/doctrine/mongodb-odm/releases/tag/2.3.0">See all changes and contributors in the
Changelog</a> on GitHub.</p>
<h2>Attributes Mapping Driver</h2>
<p>The following code example shows many of the mappings that are re-using
the annotation classes for familiarity:</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Doctrine\ODM\MongoDB\Types\Type;

#[MongoDB\Document(repositoryClass: PostRepository::class)]
class Post
{
    #[MongoDB\Id]
    private string $id;

    #[MongoDB\Field(type: Type::BOOLEAN)]
    private bool $published = false;

    #[MongoDB\Field(type: Types::COLLECTION)]
    private array $text = [];

    #[MongoDB\ReferenceOne(targetDocument: User::class)]
    public $author;

    #[MongoDB\ReferenceMany(targetDocument: Tag::class)]
    public Collection $tags;
}</code></pre>
<p>You may want to use <a href="https://getrector.org/">Rector</a> with <code>DoctrineSetList::DOCTRINE_ODM_23</code> set
to convert all your annotation mappings to attributes in seconds!</p>
<h2>JSON Schema Validation</h2>
<p>MongoDB â‰¥ 3.6 offers the capability to validate documents during
insertions and updates through a JSON schema associated with the collection.
<a href="https://docs.mongodb.com/manual/core/schema-validation/">See MongoDB documentation</a>.</p>
<p>Doctrine MongoDB ODM now provides a way to take advantage of this functionality thanks to the new
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/annotations-reference.html#validation"><code>#[Validation]</code></a> mapping.</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

#[MongoDB\Document]
#[MongoDB\Validation(
    validator: SchemaValidated::VALIDATOR,
    action: ClassMetadata::SCHEMA_VALIDATION_ACTION_WARN
)]
class SchemaValidated
{
    public const VALIDATOR = &lt;&lt;&lt;'EOT'
{
    "$jsonSchema": {
        "required": ["name"],
        "properties": {
            "name": {
                "bsonType": "string",
                "description": "must be a string and is required"
            }
        }
    },
    "$or": [
        { "phone": { "$type": "string" } },
        { "email": { "$regex": { "$regularExpression" : { "pattern": "@mongodb\\.com$", "options": "" } } } },
        { "status": { "$in": [ "Unknown", "Incomplete" ] } }
    ]
}
EOT;
}
</code></pre>
<p>Once defined, those options will be added to the collection after running
the <code>odm:schema:create</code> or <code>odm:schema:update</code> command.</p>
<h2>Psalmified APIs</h2>
<p>In-code documentation has been immensely improved to make sure static analysis tools and IDEs know
about the right document classes returned from <code>DocumentManager</code>,
<code>ClassMetadata</code>, and other public APIs. This includes generics support
for your own repositories extending <code>DocumentRepository</code>.</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Repository\DocumentRepository;
use App\Document\User;

/**
 * @template-extends DocumentRepository&lt;User&gt;
 */
class UserRepository extends DocumentRepository
{
}</code></pre>
<h2>Deprecations</h2>
<p>Doctrine MongoDB ODM 2.3 introduces several minor deprecations:</p>
<ul>
<li>The <code>Doctrine\ODM\MongoDB\Proxy\Resolver\ClassNameResolver</code> interface has been deprecated in favor
of the <code>Doctrine\Persistence\Mapping\ProxyClassNameResolver</code> interface</li>
<li>Annotation classes no longer extend <code>Doctrine\Common\Annotations\Annotation</code> class</li>
<li>Annotation arguments switched to <code>@NamedArgumentConstructor</code> for Attribute compatibility</li>
<li><code>@Inheritance</code> annotation has been removed as it was never used</li>
<li>Document Namespace Aliases (<code>'MyBundle:User</code>) - use fully qualified class names instead (<code>User::class</code>)</li>
</ul>
<p>Read more in our <a href="https://github.com/doctrine/mongodb-odm/blob/2.3.x/UPGRADE-2.3.md">upgrading</a> document. </p>
<h2>Coding Standard Support</h2>
<p>Doctrine MongoDB ODM 2.3 now supports and fully validates against Doctrine Coding
Standard version 9.0+. This greatly improves automatic pull request checks as
all new violations in a PR get caught and inlined into the PR as comments.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine DBAL 3.2.0]]></title>
            <link href="https://www.doctrine-project.org/2021/11/26/dbal-3.2.0.html"/>
            <updated>2021-11-26T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/11/26/dbal-3.2.0.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine DBAL 3.2.0. As most of the minor releases, this one
focuses on new features, improvements and deprecations of the old APIs. Here are some details on the most significant
features and improvements:</p>
<h2>Platform-aware schema comparison (<a href="https://github.com/doctrine/dbal/pull/4746">#4746</a>)</h2>
<p>Up until this release, the logic of comparing database schemas had a major design flaw: it took into account only the
abstract schema definitions without taking the target platform into account.</p>
<p>This flaw would lead to multiple issues which shared the same root cause: the two definitions could be considered
different by the DBAL, but they would produce the same DDL.</p>
<p>For instance, consider the two column definitions:</p>
<pre><code class="language-php">// old schema
$column1 = new Column('contents', Type::getType('text'));

// new schema
$column2 = new Column('contents', Type::getType('text'), ['default' =&gt; 'Hello, world!']);</code></pre>
<p>If we compared them with the comparator, we'd get a diff:</p>
<pre><code class="language-php">$comparator = new Comparator();
$comparator-&gt;diffColumn($column1, $column2);
// array(1) {
//   [0] =&gt;
//   string(7) "default"
// }</code></pre>
<p>This might be valid for the platforms that support the <code>DEFAULT</code>  constraint on <code>TEXT</code> columns but isn't valid for those
that don't support it (e.g. MySQL). Regardless of the diff, both definitions would produce the same DDL on MySQL:</p>
<pre><code class="language-sql">contents LONGTEXT NOT NULL</code></pre>
<p>An attempt to migrate the old schema to the new one would produce a false-positive diff but applying it wouldn't result
in any schema changes.</p>
<p>A false-negative diff was also possible. Consider these following example:</p>
<pre><code class="language-php">// old schema
$column1 = new Column('settings', Type::getType('json'));

// new schema
$column2 = new Column('settings', Type::getType('json'), ['length' =&gt; 16777215]);</code></pre>
<p>Comparison of the above column definitions should have triggered a diff on MySQL and migrate the underlying column
from <code>TEXT</code> to <code>MEDIUMTEXT</code> but it didn't, because the DBAL would ignore the length of the <code>TEXT</code> columns.</p>
<p>Apart from that, the DBAL would compare only a subset of the definitions, so some column options as the character set
and collation weren't taken into account during comparison at all.</p>
<h3>The new approach</h3>
<p>Instead of comparing abstract definitions on a per-property basis, the new implementation compares the DDL that is generated from both definitions for the target database platform. If the definitions produce the same DDL, they are considered equal. According to the tests and the number of resolved issues, this approach should be more accurate and less error-prone.</p>
<p>Implementing this approach was impossible without introducing a new API which rendered the existing API obsolete.</p>
<p>Prior to DBAL <code>3.2.0</code>, the schema comparator could be only instantiated directly via the <code>new</code> keyword:</p>
<pre><code class="language-php">$comparator = new Comparator();</code></pre>
<p>Instantiated like this, the comparator doesn't have a notion of the target database platform and cannot perform the comparison properly. That is why, this way of instantiation is deprecated in favor of instantiating the comparator by the schema manager:</p>
<pre><code class="language-php">$schemaManager = $connection-&gt;createSchemaManager();
$comparator = $schemaManager-&gt;createComparator();</code></pre>
<p>This way, the schema manager can instantiate a platform-specific comparator and provide it with the necessary context (e.g. the default collation used by the database).</p>
<p>While the old API is still available, it is recommended to use the new API for more accurate comparison.</p>
<h2>Support for <code>psr/cache</code> (<a href="https://github.com/doctrine/dbal/pull/4620">#4620</a>)</h2>
<p>Since the Doctrine Cache library is being sunset, the new DBAL release introduced the ability to use a PSR-6 compatible implementation for result caching.</p>
<p>While both the <code>doctrine/cache</code> and <code>psr/cache</code> APIs will be supported until the next major DBAL release, we recommend users to switch to a PSR-6 compatible implementation in their projects.</p>
<h2>Support for <code>psr/log</code> (<a href="https://github.com/doctrine/dbal/pull/4967">#4967</a>)</h2>
<p>The <code>SQLLogger</code> interface was designed long ago and has certain limitations: there is no way to log messages at different logger levels and it is really challenging to extend the logger functionality without introducing breaking API changes.</p>
<p>The new DBAL release introduces a new middleware that can delegate logging to a PSR-3 compatible implementation.</p>
<p>Note that the new logger won't produce the messages identical to the ones produced by the old one. If you have any processes built around analysing log messages, you may need to make some changes before adopting the new API.</p>
<h2>Always cache the full result (<a href="https://github.com/doctrine/dbal/pull/5003">#5003</a>)</h2>
<p>The implementation of the result cache prior to DBAL 3.2.0 would store the result set in the cache only once it was fetched completely. It led to the following issues:</p>
<ol>
<li>If the result isn't yet cached and its consumer didn't fetch it completely, the query would be executed again.</li>
<li>In case of a cache miss, the DBAL would <code>get()</code> the cache entry twice: once to fetch the data and once to merge the just fetched result with other results that may be stored in the cache.</li>
</ol>
<p>The new implementation stores the results in the cache right after they were fetched. It simplifies the caching layer significantly and makes its behavior more straightforward.</p>
<h2>Add events for Transaction begin/commit/rollback (<a href="https://github.com/doctrine/dbal/pull/4622">#4622</a>)</h2>
<p>The new DBAL version introduces three more transaction-related events:</p>
<ul>
<li><code>onTransactionBegin</code>,</li>
<li><code>onTransactionCommit</code>,</li>
<li><code>onTransactionRollBack</code>.</li>
</ul>
<p>Subscribing to those might be helpful if the application logic integrates the database transaction flow with the business logic implemented outside the database. For instance, in the filesystem.</p>
<h2>Basic exception handling in IBM DB2 and SQL Server drivers (<a href="https://github.com/doctrine/dbal/pull/4929">#4929</a>, <a href="https://github.com/doctrine/dbal/pull/4928">#4928</a>)</h2>
<p>The DBAL provides a mechanism that converts driver-specific error codes to portable error-specific exceptions. For instance an attempt to insert <code>NULL</code> into a column that has a <code>NOT NULL</code> constraint applied will result in error with the code <code>1566</code> on MySQL and in <code>ORA-01400</code> on Oracle. The DBAL will convert these two errors to a portable <code>NotNullConstraintViolationException</code>.</p>
<p>Historically, the DBAL drivers based on the <code>ibm_db2</code>, <code>sqlsrv</code> and <code>pdo_sqlsrv</code> extensions did not support this feature and would thow a generic <code>DriverException</code>.</p>
<p>As of DBAL 3.2.0, this feature is supported by all bundled drivers.</p>
<h2>Improved <code>AbstractPlatform::getLengthExpression()</code> (<a href="https://github.com/doctrine/dbal/pull/4855">#4855</a>)</h2>
<p>Although the <code>LENGTH</code> expression was implemented for all supported database platforms, the different implementations didn't have consistent semantics:</p>
<ol>
<li>Most implementations would return the length in characters (Unicode code points), which is the most expected behavior.</li>
<li>The implementations for MySQL and IBM DB2 would return the number of bytes. It worked fine for the strings that consisted only of the ANSI characters, but an attempt to use it with a wider range of characters would produce an unexpected result. For instance, the length of the string  <code>'ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ð¼Ð¸Ñ€!'</code> might be reported as <code>19</code> instead of <code>12</code>.</li>
</ol>
<p>As of DBAL 3.2.0, all platforms return the length in Unicode points according to the character set used by the database connection. Note, SQL Server supports UTF-8 only as of SQL Server 2019.</p>
<p>You can find more details in the <a href="https://github.com/doctrine/dbal/releases/tag/3.2.0">release notes</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[DBAL 3 SQL Injection Security Vulnerability fixed (CVE-2021-43608)]]></title>
            <link href="https://www.doctrine-project.org/2021/11/11/dbal3-vulnerability-fixed.html"/>
            <updated>2021-11-11T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/11/11/dbal3-vulnerability-fixed.html</id>
            <content type="html"><![CDATA[<p>We have released a new version Doctrine DBAL 3.1.4 that fixes a critical SQL
injection vulnerability in the LIMIT clause generation API provided by the
Platform abstraction.</p>
<p>We advise everyone using Doctrine DBAL 3.0.0 up to 3.1.3 to upgrade to 3.1.4
immediately. </p>
<p>The vulnerability can happen when unsanitized input is passed to many APIs in
Doctrine DBAL and ORM that ultimately end up calling
<code>AbstractPlatform::modifyLimitQuery</code>.</p>
<p>As a workaround you can cast all limit and offset parameters to integers before
passing them to Doctrine APIs.</p>
<p>This vulnerability has been assigned
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43608">CVE-2021-43608</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine ORM 2.9 with Attributes, Typed Properties, more]]></title>
            <link href="https://www.doctrine-project.org/2021/05/24/orm2.9.html"/>
            <updated>2021-05-24T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2021/05/24/orm2.9.html</id>
            <content type="html"><![CDATA[<p>We have released a new minor version 2.9 of Doctrine ORM, the first version
with support for using PHP 8 Attributes as a new driver for mapping entities
and several other changes. <a href="https://github.com/doctrine/orm/releases/tag/2.9.0">See all changes and contributors in the
Changelog</a> on Github.</p>
<h2>Attributes Mapping Driver</h2>
<p>The following code example shows many of the mappings that are re-using
the annotation classes for familiarity:</p>
<pre><code class="language-php">use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity(repositoryClass: PostRepository::class)]
class Post
{
    #[ORM\Column(type: Types::INTEGER)]
    #[ORM\Id, ORM\GeneratedValue(strategy: 'AUTO')]
    private ?int $id;

    #[ORM\Column(type: Types::BOOLEAN)]
    private bool $published = false;

    #[ORM\Column(type: Types::SIMPLE_ARRAY)]
    private array $text = [];

    #[ORM\ManyToOne(targetEntity: User::class)]
    public $author;

    #[ORM\ManyToMany(targetEntity: Tag::class)]
    #[ORM\JoinTable(name: "post_tags")]
    #[ORM\JoinColumn(name: "post_id", referencedColumnName: "id")]
    #[ORM\InverseJoinColumn(name: "tag_id", referencedColumnName: "id")]
    public Collection $tags;
}</code></pre>
<h2>Typed Property Defaults</h2>
<p>Since PHP 7.4 types can be declared on class properties and Doctrine now
uses these type declarations to reduce amount of mapping boilerplate:</p>
<ul>
<li>Columns don't need the type definitions</li>
<li>ManyToOne and OneToOne don't need target entity definitions</li>
</ul>
<p>Example:</p>
<pre><code class="language-php">use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity(repositoryClass: UserRepository::class)]
class User
{
    #[ORM\Id, ORM\Column, ORM\GeneratedValue]
    public ?int $id = null;

    #[ORM\Column]
    public \DateTime $created;

    #[ORM\ManyToOne]
    public Email $email;
}</code></pre>
<h2>Psalmified APIs</h2>
<p>Improved the documentation to make sure static analysis tools and IDEs know
about the right entity classes returned from <code>EntityManager</code>,
<code>EntityRepository</code> and other public ORM APIs. This includes generics support
when you extend <code>EntityRepository</code>.</p>
<pre><code class="language-php">use Doctrine\ORM\EntityRepository;
use App\Entity\User;

/**
 * @template-extends EntityRepository&lt;User&gt;
 */
class UserRepository extends EntityRepository
{
}</code></pre>
<h2>Query::HINT_READ_ONLY</h2>
<p>A new query hint is added that allows hydrating entities through DQL that are
marked as read only for the unit of work session, as long as they are not yet
loaded as writeable:</p>
<pre><code class="language-php">$dql = 'SELECT u FROM ' . ReadOnlyEntity::class . ' u WHERE u.id = ?1';

$query = $entityManager-&gt;createQuery($dql);
$query-&gt;setParameter(1, $user-&gt;id);
$query-&gt;setHint(Query::HINT_READ_ONLY, true);

$user = $query-&gt;getSingleResult();</code></pre>
<h2>Index/UniqueConstraints using Field Names</h2>
<p>Instead of specifying column names for an index or unique-constraint declaration
you can now alternatively use field names.</p>
<pre><code class="language-php">
use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity]
#[ORM\Index(fields: ["isPublished"])]
class Post
{
    #[ORM\Column]
    public bool $isPublished = false;
}</code></pre>
<p>This simplifies mapping as the column names passed through the naming strategy
do not need to be known.</p>
<h2>INDEX BY Associations</h2>
<p>Previously DQL <code>INDEX BY</code> was not possible for assocations, now you can:</p>
<pre><code class="language-php">$dql = 'SELECT p, u FROM Post INDEX BY p.author JOIN p.author u WHERE p.id = 3';</code></pre>
<h2>Deprecations</h2>
<p>Doctrine ORM 2.9 rethinks deprecations and integrates with our new
<a href="https://github.com/doctrine/deprecations/">doctrine/deprecations</a> library.</p>
<ul>
<li>Undeprecate <code>merge()</code> and <code>detach()</code> as no replacements are available yet</li>
<li>Notify Persist Change Tracking: Use Explicit Change Tracking instead</li>
<li>DQL <code>SELECT PARTIAL</code> syntax, use Value Objects with <code>SELECT NEW</code> instead</li>
<li><code>EntityManager::flush()</code> with arguments</li>
<li><code>EntityManager::clear()</code> with arguments (use detach)</li>
<li>Named Queries in Mapping (use Repository)</li>
<li><code>cli-config.php</code> for console command configuration, inject <code>EntityManagerProvider</code> instead.</li>
<li>Deprecate <code>doctrine/cache</code> for metadata caching, use PSR-6 cache instead</li>
</ul>
<h2>Cache Deprecations and PSR-6</h2>
<p>Over the next versions we will deprecate use of doctrine/cache and replace it
with PSR-6. If you are still using doctrine/cache code in your own application
make sure to force the versions to &quot;^1.10&quot; in composer.json.
<a href="https://github.com/doctrine/cache/issues/354">Details</a></p>
<h2>PHP 7.1 Support</h2>
<p>ORM 2.9 reintroduces PHP 7.1 support, because it wasn't technically unsupported
anyways.  No changes were necessary to the code to allow it again except in the
testsuite.</p>
<p>The PHP 7.1 support was re-added to allow a very broad approach to prepare for
some of the deprecations that are introduced in ORM 2 and will be removed in
version 3.0.</p>
<h2>Coding Standard Support</h2>
<p>Doctrine ORM 2.9 now supports and fully validates against Doctrine Coding
Standard version 9.0+. This greatly improves automatic pull request checks as
all new violations in a PR get caught and inlined into the PR as comments.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine DBAL 2.13.1 and 3.1.0 with important Forward Compatibility fix]]></title>
            <link href="https://www.doctrine-project.org/2021/04/19/dbal-2.13.1-3.1.0.html"/>
            <updated>2021-04-19T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2021/04/19/dbal-2.13.1-3.1.0.html</id>
            <content type="html"><![CDATA[<p>Last month <a href="https://www.doctrine-project.org/2021/03/29/dbal-2.13.html">we released DBAL
2.13.0</a> as an
important push for the ecosystem towards DBAL 3 with an extensive deprecation
and forward compatibility layer.</p>
<p>We made a few mistakes, given that the forward compatibility layer is quite complex.
As such we have now released Doctrine DBAL 2.13.1 and 3.1.0 with two new APIs
that improve the forward compatiblity.</p>
<p>The problem lies in <code>Statement::execute()</code>: 2.13.0 would return a <code>bool</code> and
3.0.0 would return a <code>Result</code> from this method. This kind of API change cannot
be handled with a forward compatibility.</p>
<p>As such we introduced two new APIs on <code>Statement</code> that replace <code>execute()</code>.
When the old code was:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$statement-&gt;execute();

$rows = $statement-&gt;fetchAll();</code></pre>
<p>Then the new code is now:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$result = $statement-&gt;executeQuery();

$rows = $result-&gt;fetchAllAssociative();</code></pre>
<p>The DBAL 2.13 forward compatiblity layer supports both versions of all code and
returns a Statement/Result hybrid that has all the APIs that the DBAL Statement
had up until version 2.12. This way you can move at your own pace from the old
to the new API in your code.</p>
<p>Thank you again to <a href="https://github.com/mdumoulin">mdumoulin</a> for the work on
improving the forward compatiblity and to <a href="https://twitter.com/srgmrzv">Sergei Morozov</a>
for the thorough reviews and comments.</p>
<p>Again I want to highlight the Runtime Deprecations library that we introduced
to support this migration. You can integrate this with your log stack during
development and testing:</p>
<pre><code class="language-php">use Doctrine\Deprecations\Deprecation;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

$log = new Logger('doctrine');
$log-&gt;pushHandler(new StreamHandler('deprecations.log', Logger::INFO));

Deprecation::enableWithPsrLogger($log);</code></pre>
<p>Or alternatively using PHP's global error handler:</p>
<pre><code class="language-php">Deprecation::enableWithTriggerError();</code></pre>
<p>See the <a href="https://www.doctrine-project.org/2021/03/29/dbal-2.13.html">2.13 blog
post</a> for more
information about the migration to DBAL 3 and strategy recommendations.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine DBAL 2.13 with Deprecations and Forward Compatibility]]></title>
            <link href="https://www.doctrine-project.org/2021/03/29/dbal-2.13.html"/>
            <updated>2021-03-29T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2021/03/29/dbal-2.13.html</id>
            <content type="html"><![CDATA[<p>We have released DBAL 2.13, what we plan to be the last minor version in the 2.x family of Doctrine DBAL.
This release includes additional forward compatibility to DBAL 3 around
<code>Statement</code> and <code>Result</code> API and with an integration in our new
deprecations logging library.</p>
<p>In addition this DBAL release re-enables PHP 7.1 and 7.2 compatibility to give
as much flexibility as possible to everyone with forward compatibility.</p>
<h3>Statement and Result Forward Compatibility</h3>
<p>DBAL 3.0 extracts all fetch-methods from the <code>Statement</code> API and moved them
to a new <code>Result</code> API that is returned from <code>Statement::execute</code>. We have
backported this API to 2.13 - so that you can support writing code for both
DBAL 2 and 3 at the same time.</p>
<p>Old code:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$statement-&gt;bindParam(1, $value);
$statement-&gt;execute();

while (($row = $statement-&gt;fetch()) !== false) {
}

$connection-&gt;executeQuery('SELECT * FROM tbl')-&gt;fetchAll();</code></pre>
<p>New Code:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$statement-&gt;bindParam(1, $value);
$result = $statement-&gt;executeQuery();

while (($row = $result-&gt;fetchAssociative()) !== false) {
}

$connection-&gt;executeStatement('SELECT * FROM tbl')-&gt;fetchAllAssociative();</code></pre>
<p>The Result Fetching API was improved to use more human-readable names:</p>
<pre><code class="language-php">// Old
$stmt-&gt;fetch();
$stmt-&gt;fetch(PDO::FETCH_ARRAY);
$stmt-&gt;fetchColumn();
$stmt-&gt;fetchAll();

// New
$result = $stmt-&gt;execute();
$result-&gt;fetchAssociative();
$result-&gt;fetchNumeric();
$result-&gt;fetchOne();
$result-&gt;fetchAllAssociative();</code></pre>
<p>Many more changes have been made on the public API and also for the internals,
but these are the most common ones.</p>
<p>Thank you to <a href="https://github.com/mdumoulin">mdumoulin</a> for the work on
improving the forward compatiblity.</p>
<h3>Deprecations Logging</h3>
<p>We have wrestled internally for a long time with the strategy on runtime
deprecation going forward and settled on introducing a small, new API for
reporting the usage of deprecated APIs.</p>
<p>The reason for this abstraction is the potential for side effects caused by an
error handler and the potential overhead. We expect our deprecations to be
triggered a few hundred times in some requests as such the production overhead
must be minimal. </p>
<p>This means deprecation logging is disabled by default and you must enable
it to either use <code>@trigger_error</code> or a PSR-3 compatible logger.</p>
<p>See the <a href="https://github.com/doctrine/deprecations/">deprecation library
README.md</a> for details on how to
configure and use it.</p>
<h3>PHP 7.1 and 7.2 Support</h3>
<p>A few large Doctrine DBAL deployments still support older versions of PHP that
are not officially supported anymore, but are covered by support of a few Linux
distributions.</p>
<p>To provide the largest possible flexibility to the ecosystem to run code with
both DBAL 2 or 3 this version of Doctrine DBAL will work again with PHP 7.1 and
7.2</p>
<h3>Migrate to DBAL 3</h3>
<p>We recommend a three step strategy to move your code-base and that of your
dependents to DBAL 3. It depends if you are working on a library or
platform that is dependent upon, or if you are working on a standalone application.</p>
<p>For a standalone application:</p>
<ol>
<li>Upgrade to DBAL 2.13 and enforce &quot;^2.13&quot; as a version constraint in
composer.json</li>
<li>Enable deprecation tracking and eliminate all deprecations triggered in your
codebase.</li>
<li>After fixing all deprecations, update composer constraint to &quot;^3.0&quot;.
Doctrine will upgrade to version 3 if all other dependencies you are using
are ready as well to upgrade to version 3. If it fails, you need to identify
and update the dependencies as well.</li>
</ol>
<p>For a library, framework or platform:</p>
<ol>
<li>Upgrade to DBAL 2.13 and enforce &quot;^2.13&quot; as a version constraint in
composer.json</li>
<li>Enable deprecation tracking and eliminate all deprecations triggered in your
codebase. Release a version so that all plugins and downstream users
can be notified of using deprecated Doctrine DBAL directly themselves.</li>
<li>After fixing all deprecations, update composer constraint to &quot;^2.13 | ^3.0&quot;.
Doctrine will only upgrade to version 3 if all other dependencies you are
using are ready as well to upgrade to version 3.</li>
</ol>
<p>We recommend the following strategies to detect the use of deprecated code:</p>
<ul>
<li>Use Psalm, other static analyzers or IDEs to detect the use of deprecated code.</li>
<li>If you have an extensive test-suite, register a PSR-3 logger with Doctrine
Deprecations to catch all deprecations while running the tests.</li>
<li>Otherwise register a PSR-3 logger with Doctrine Deprecations in development
or staging only and collect and fix them as well you can. This could be
done for a longer amount of time of days, weeks or months.</li>
<li>If that is not possible, register a PSR-3 logger in production. Make sure to
eliminate high frequency deprecations quickly or call <code>ignoreDeprecation</code> to
snooze them to avoid overhead.</li>
</ul>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Major Release: Doctrine DBAL 3.0]]></title>
            <link href="https://www.doctrine-project.org/2020/11/17/dbal-3.0.0.html"/>
            <updated>2020-11-17T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2020/11/17/dbal-3.0.0.html</id>
            <content type="html"><![CDATA[<p>We have released a new major version of Doctrine DBAL, version 3.0.0. This new
major version comes almost 10 years after DBAL 2.0 was released on December
2010, then coupled into the ORM 2.0.</p>
<p>Today Doctrine DBAL is released independent of the ORM, thanks to Composer and
sees its new major version before the ORM.</p>
<p>This release was made possible foremost by
<a href="https://twitter.com/srgmrzv">Sergei Morozov</a>, our primary DBAL maintainer, who has
spent countless hours working on the package since 2016. Thank you!</p>
<p>See the <a href="https://github.com/doctrine/dbal/releases/tag/3.0.0">Release Notes</a>
for a detailed list of changes.</p>
<p>This blog post covers a few of the major changes in a bit more detail to give
you an idea of what DBAL 3.0 looks like.</p>
<h3>Decouple DBAL from PDO</h3>
<p>The major theme of DBAL 3.0 is the decoupling from PDO. Instead of copying the
API verbatim like DBAL 2.0 did, DBAL 3.0 grows it into a better, more usable
direction.</p>
<p>We extract all fetch-methods from the <code>Statement</code> class and moved them to a new
<code>Result</code> class that is returned from <code>Statement::execute</code>.</p>
<p>Old code:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$statement-&gt;bindParam(1, $value);
$statement-&gt;execute();

while ($row = $statement-&gt;fetch()) {
}</code></pre>
<p>New Code:</p>
<pre><code class="language-php">$statement = $connection-&gt;prepare('SELECT * FROM tbl WHERE col = ?');
$statement-&gt;bindParam(1, $value);
$result = $statement-&gt;execute();

while ($row = $result-&gt;fetchAssociative()) {
}</code></pre>
<p>The Result Fetching API was improved to use more human-readable names:</p>
<pre><code class="language-php">// Old
$stmt-&gt;fetch();
$stmt-&gt;fetch(PDO::FETCH_ARRAY);
$stmt-&gt;fetchColumn();
$stmt-&gt;fetchAll();

// New
$stmt-&gt;fetchAssociative();
$stmt-&gt;fetchNumeric();
$stmt-&gt;fetchOne();
$stmt-&gt;fetchAllAssociative();</code></pre>
<p>Many more changes have been made on the public API and also for the internals,
but these are the most visible ones.</p>
<h3>Upgrading to DBAL 3 from 2</h3>
<p>DBAL 3 is a real new major release with significant changes to the public API. Depending
on your codebase a migration could require non-trivial work. However we do not intend
to leave you hanging with DBAL 2 and a future migration:</p>
<ol>
<li>
<p>We intend to support DBAL 2.12 a while longer, including support for the
upcoming PHP 8.0, so that there is no rush for you to upgrade to DBAL 3.</p>
</li>
<li>
<p>DBAL 2.12 already includes forwards compatible API changes for all the new APIs,
so that you can migrate your code step by step to the new APIs already.</p>
</li>
<li>
<p>Deprecated methods in DBAL 2.12 are tagged with the <code>@deprecated</code> doc-block
and static analysis tools such as Psalm, PHPStan and Phan can already help
you detect using or calling this deprecated code in your application.</p>
</li>
<li>
<p>We intend to release another version of DBAL 2 which includes
optional triggering of deprecation messages at runtime similar to how Symfony
deals with deprecations.</p>
</li>
</ol>
<p>As you can see, with these approaches it will be possible for you to smoothly migrate
your application from DBAL 2 to 3.</p>
<p>As a note to libraries and frameworks that need to support multiple versions of
Doctrine DBAL: We recommend you start out with DBAL 2.12 and migrate all usages
of deprecated APIs to their newer counterparts. Then once you have managed
this, you can allow 3.0 and try to get your code working with both versions.
Unfortunately this may not be possible for all cases, because we could not
provide replacement APIs for everything and some features have been dropped
between DBAL 2 and 3.</p>
<h3>Outlook</h3>
<p>DBAL 3 is a huge first step towards a modern database abstraction layer,
independent from the legacy of PHP and PDO API design. In the future we plan to
improve DBAL in other ways that we haven't gotten around yet, such as more API
modernization, increased safety with use of strict scalar types in the code
base, better error handling and more.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Released doctrine/migrations 3.0-alpha]]></title>
            <link href="https://www.doctrine-project.org/2020/04/10/doctrine-migrations-3.0.html"/>
            <updated>2020-04-10T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2020/04/10/doctrine-migrations-3.0.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/doctrine/migrations"><code>doctrine/migrations</code> 3.0-alpha</a>
has been <a href="https://github.com/doctrine/migrations/tree/3.0.0-alpha1">published</a> on the 29th March 2020. </p>
<p>The upcoming 3.0 new major release is the result of almost 6 months of work and brings
a completely refactored/rewritten internal structure and some interesting new features.  </p>
<h3>Why a new major release?</h3>
<p>The <code>doctrine/migrations</code> <code>v1.x</code> codebase is 10 years old, and in the past years a lot of features have been added on top of its
initial architecture.<br />
<code>doctrine/migrations</code> <code>2.0</code> was released a bit more than a year ago. This major release did a bit of cleanup,
but the general structure remained the same.
In this schema you can see the dependencies between classes in the latest <code>2.3.x</code> branch:</p>
<div class="text-center">
<object width="70%" data="/images/posts/doctrine-migrations-3.0/complex-cycle-v2.svg" type="image/svg+xml"></object>
</div>
<p>The red lines are circular dependencies (and we already know that in software development circular dependencies are not
a good thing).</p>
<p>In <code>doctrine/migrations</code> <code>3.x</code>, most of the internal classes have been re-written and dependency injection has been
widely adopted.<br />
In this schema you can see the dependencies between classes in the latest <code>master</code> branch (release v3.0):</p>
<div class="text-center">
<object width="70%" data="/images/posts/doctrine-migrations-3.0/complex-cycle-v3.svg" type="image/svg+xml"></object>
</div>
<p>As you can see the circular dependencies are gone. This has been possible thanks to extensive use of dependency injection
and applying SOLID principles.
To reduce future backward incompatibilities, many classes have been marked as <code>final</code> or as <code>@internal</code> while
keeping the functionalities intact. Extensibility is still possible by using dependency injection and providing
classes implementing dedicated interfaces.</p>
<p><em>These schemas have been generated using <a href="https://github.com/mamuz/PhpDependencyAnalysis">PhpDependencyAnalysis</a>
with <a href="https://gist.github.com/goetas/e6343746a6ccd6ebb191cbbd675898e0">this configuration</a>.</em></p>
<h3>New features and improvements</h3>
<p>Beside the code quality improvements, there is a a long list of improvements (see below), but
<strong>the main user-facing feature is the ability to collect migrations from multiple folders/namespaces and
to specify dependencies between migrations.</strong></p>
<p>Here a (probably not complete) list of improvements implemented in the upcoming <code>3.0</code> release: </p>
<ul>
<li>ability to collect migrations from multiple folders/namespaces and to specify dependencies between migrations</li>
<li><code>doctrine/migrations</code> will write to your database only when running migrations
(previously the metadata table was created on the very first command run even if it was a read-only command)</li>
<li>Output verbosity can be controlled using the <code>-v</code>, <code>-vv</code> or <code>-vvv</code> command parameters</li>
<li>Use of dependency injection allows you to decorate/replace most services</li>
<li>Removed usage of console helpers to provide the connection or entity manager in favor of dependency injection</li>
<li>Introduced <code>migrations:list</code> command to list the available/executed migrations</li>
<li>Introduced <code>migrations:sync-metadata-storage</code> command to explicitly update the metadata schema in case a newer version
introduces changes to the metadata table</li>
<li>Multiple migrations can be passed to the <code>migrations:execute</code> command</li>
<li>More organized output of the <code>migrations:status</code> command</li>
<li>Configurations and Dependency Factory are read-only during the migration process</li>
<li>The <code>down()</code> migration is optional now</li>
<li>Multi-namespace migrations</li>
<li>Custom migrations metadata storage</li>
<li>Added warning when using the <code>migrations:diff</code> if there are not executed migrations</li>
</ul>
<h3>Backward compatibility</h3>
<p>In <code>doctrine/migrations</code> <code>3.0</code> a lot of things changed, but for end-users most of the things will look the same.
Your migration files do not need any update.</p>
<p>You will have to change  your configuration files, as the configuration format has changed.
The <a href="https://www.doctrine-project.org/projects/doctrine-migrations/en/latest/reference/configuration.html#configuration">official documentation</a> contains more information about these changes.
This documentation should be particularly helpful if you did also some custom integration with third party frameworks
or libraries.</p>
<p>If you wrote custom event listeners, please take a look at them as the method signatures for event listeners have been updated.</p>
<h3>Symfony Integration</h3>
<p>If you are using <a href="https://github.com/doctrine/DoctrineMigrationsBundle">DoctrineMigrationsBundle</a> then things are even
easier: the 2.3.0 release introduced some deprecation notices and if you have already solved them
your configuration is already compatible. If you want you can have a look to the latest configuration format
available on the <a href="https://www.doctrine-project.org/projects/doctrine-migrations-bundle/en/3.0/index.html#configuration">official documentation</a>.
You can look more in detail to which changes are needed in the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/blob/master/UPGRADE.md">upgrading</a> document.</p>
<h3>What is next</h3>
<p>In the upcoming weeks, we will be preparing the first beta release and starting the process to reach a stable release.
<strong>To be able to deliver a good stable release it is important that you test the pre-release and share your feedback!</strong></p>
<p>To try the alpha version, you can run:</p>
<pre><code class="language-bash">composer require 'doctrine/migrations:^3.0@alpha'</code></pre>
<p>If you are using Symfony: </p>
<pre><code class="language-bash">composer require 'doctrine/doctrine-migrations-bundle:^3.0@alpha' 'doctrine/migrations:^3.0@alpha'</code></pre>
<p>You can be also more brave trying the development versions by specifying <code>@dev</code> instead of <code>@alpha</code>
when requiring the composer dependencies above.</p>
<p>You can also have a look at the <a href="https://github.com/doctrine/migrations/releases/tag/3.0.0-alpha1">release notes</a>
and the <a href="https://github.com/doctrine/migrations/blob/3.0.0-alpha1/UPGRADE.md">upgrading</a> document.</p>
<p>Similarly you can also have a look at the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/releases/tag/3.0.0-alpha.1">release notes</a>
and the <a href="https://github.com/doctrine/DoctrineMigrationsBundle/blob/3.0.0-alpha.1/UPGRADE.md">upgrading</a> document for the Symfony bundle.</p>
<p>In the alpha release, breaking changes are still possible.
In the beta, release breaking changes are possible but will happen
only if we will find very unexpected behaviors.
When the alpha and beta phase will be completed, a stable version will be made available. </p>
<h2>Note</h2>
<p>This post was initially published on <a href="https://www.goetas.com/blog/released-doctrinemigrations-30-alpha/">https://www.goetas.com/blog/released-doctrinemigrations-30-alpha/</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.3.0 and 2.0.0-RC2 released]]></title>
            <link href="https://www.doctrine-project.org/2019/09/30/mongodb-odm-1.3.0-and-2.0.0-RC2.html"/>
            <updated>2019-09-30T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2019/09/30/mongodb-odm-1.3.0-and-2.0.0-RC2.html</id>
            <content type="html"><![CDATA[<p>The Doctrine team is proud to announce that MongoDB ODM 1.3.0 and 2.0.0-RC2 have
been released. These releases are the culmination of a long effort to migrate
the ODM away from the legacy <code>mongo</code> extension to the new MongoDB driver
(<code>mongodb</code> extension and PHP library). This results in a number of BC breaks for
users, but will enable us to add many new features in future releases, among
them support for multi-document transactions.</p>
<p>MongoDB ODM 1.3.0 is a compatibility release targeted for users of the legacy
extension that want to migrate to MongoDB ODM 2.0. It helps identify BC breaks
by throwing deprecation notices and offering a forward compatibility layer where
possible. To efficiently find usages of deprecated code, you can use the PHPUnit
bridge developed by Symfony
(<a href="https://github.com/symfony/phpunit-bridge">symfony/phpunit-bridge</a>) which logs
all deprecation notices encountered during a run of PHPUnit. You can read more
about this component in the
<a href="https://symfony.com/doc/current/components/phpunit_bridge.html">Symfony documentation</a>.</p>
<p>MongoDB ODM 2.0.0RC-2 is the recommended package to use for those starting new
projects with MongoDB ODM. It ensures that you use the modern API for ODM
without having to worry about deprecations. While this is still a release
candidate, it is planned to make this version the next stable MongoDB ODM
release.</p>
<h1>Whatâ€™s new in MongoDB ODM 2.0?</h1>
<p>Most importantly, this version no longer uses the legacy <code>mongo</code> extension. That
extension is no longer maintained and does not support server versions beyond
MongoDB 3.0. The new MongoDB driver ensures that MongoDB ODM can leverage
features and improvements contained in newer MongoDB versions, such as support
for multi-document transactions, retryable reads, retryable writes, change
streams, and much more.</p>
<p>Changing the driver also means significant changes to some APIs. Most
importantly, the GridFS API has been rewritten from scratch to conform with
MongoDBâ€™s GridFS spec for drivers. If youâ€™ve used GridFS before, this will be a
big change for you, but the new API is much simpler and cleaner to use. Check
out the
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/storing-files-with-mongogridfs.html#storing-files-with-gridfs">GridFS documentation</a>
to find out how to use the new API. Unfortunately, we cannot provide a forward
compatibility layer for this, as re-implementing this API atop the legacy driver
is not feasible.</p>
<p>Lazy reference support has been changed completely and no longer uses proxy
objects from the deprecated doctrine/common library. Instead, it builds on
<code>ocramius/proxy-manager</code>, which gives us access to more advanced features like
partial proxy loading, which we will start leveraging in future releases.</p>
<p>In 2.0 we dropped support for the YAML mapping of documents. This step was
necessary to both reduce the complexity of the code base and lower the burden of
maintaining multiple mapping drivers. If you are currently using YAML mappings,
we provide a console command to migrate YAML mappings to the XML format. We are
currently working on an alternative that allows for a more flexible mapping
configuration system, but this is not ready yet and will only be provided in a
future 2.x release.</p>
<h1>Migrating to MongoDB ODM 2.0</h1>
<p>If you are using MongoDB ODM 1.x, the upgrade consists of multiple steps. First,
ensure that you are fulfilling the necessary requisites for MongoDB ODM 2.0:</p>
<ul>
<li>PHP version 7.2 or newer</li>
<li>ext-mongodb 1.5.0 or newer</li>
<li>mongodb/mongodb library 1.4.0 or newer</li>
<li>MongoDB 3.0 or newer</li>
</ul>
<p>If you are already running PHP 7, you will most likely already be running
ext-mongodb as the legacy extension is not available for PHP 7. If you are still
running PHP 5.x, it is recommended that you migrate to PHP 7 before attempting
to use a newer ODM version. You can do so by following the instructions on
running ODM 1.x on PHP 7.</p>
<p>Once you fulfill all dependencies, the first step is updating to the latest 1.3
release of MongoDB ODM. If you are using Symfony, you also need to upgrade the
ODM bundle to its latest
<a href="https://github.com/doctrine/DoctrineMongoDBBundle/releases/tag/3.6.0">3.6 version</a>.
Once this is done, you can start fixing any deprecation notices that you find.
This should be a familiar process for any existing Symfony users. We tried to
provide compatibility layers where possible; unfortunately, we could not do so
in all cases.</p>
<p>The next step is upgrading to ODM 2.0 directly. For many users, this step
shouldnâ€™t be a problem thanks to the compatibility layer in 1.x. There may be
some necessary changes depending on the features you use (e.g. GridFS).</p>
<h1>Whatâ€™s next for MongoDB ODM</h1>
<p>During the past few years, we focussed our limited development time almost
exclusively on the driver migration, which came at the expense of supporting new
features in MongoDB. We plan to add support for many of those features in future
releases. You can get an overview of whatâ€™s planned by checking the roadmap. If
you are looking for a specific feature, please let us know in the issue tracker.</p>
<p>While not exhaustive or guaranteed, these are some of the features we plan to
implement in future releases:</p>
<ul>
<li>Support for multi-document transactions (on-demand and implicit while flushing
the Document Manager)</li>
<li>Support for new aggregation pipeline stages and operators</li>
<li>Support for the $expr query operator</li>
<li>Support for aggregation pipelines in update operations</li>
<li>Support for reading documents from views instead of collections</li>
<li>Atomic updates for collections using new array update operators</li>
</ul>
<h1>Support timeline</h1>
<p>With these releases, weâ€™re also introducing our new support timeline. Along with
the two releases announced above, we are also releasing the end-of-life release
for MongoDB ODM 1.2. We will not support MongoDB ODM 1.2 any more and encourage
users to upgrade to 1.3. Since 1.3 has no additional requirements over 1.2,
upgrading should be possible for all users of ODM 1.2.</p>
<p>MongoDB ODM 1.3 will be supported for at least 6 months after the first stable
release of ODM 2.0. We will communicate this date when releasing ODM 2.0. After
those 6 months, we will either drop support for ODM 1.3 or extend it for another
3 months, depending on the adoption rate of ODM 2.0. We are aware that the
number and kind of BC breaks for 2.0 pose a significant challenge for many
users, which is why we donâ€™t want to force people to rush into this update.</p>
<p>During the support phase for MongoDB ODM 1.3, we will also continue to provide
bug fixes to the MongoDB Abstraction Layer that is used by MongoDB ODM 1.x. This
project will reach end-of-life at the same time as MongoDB ODM 1.3, and will no
longer be supported beyond that. We encourage users that depend on this library
to switch to using the MongoDB PHP Library, which is part of the official
MongoDB driver for PHP.</p>
<h1>Contributing to MongoDB ODM</h1>
<p>We are currently looking for contributors. This doesnâ€™t necessarily mean
implementing new features or merging pull requests. Reporting or triaging
issues, requesting features, and reporting bugs are all extremely important and
helps us deliver better software!</p>
<h1>Getting help</h1>
<p>The documentation can be found on the website:
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/index.html">https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/index.html</a>.
To get support, contact us via the #mongodb-odm channel within the Doctrine
Slack. If you believe you have found a bug, please file a bug report on GitHub.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine Webinars]]></title>
            <link href="https://www.doctrine-project.org/2019/05/30/doctrine-webinars.html"/>
            <updated>2019-05-30T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2019/05/30/doctrine-webinars.html</id>
            <content type="html"><![CDATA[<p>As mentioned in the <a href="/2019/05/21/monetizing-open-source.html">Monetizing Open Source</a> blog post,
Doctrine will be regularly organizing online <a href="/events.html">webinars</a> hosted with <a href="https://zoom.us/">Zoom</a>.
You can join from anywhere in the world with a laptop and an internet connection. We will
have topics presented by Doctrine core team members and members of the community.</p>
<p>To get things started we have a few webinars scheduled for the next few months:</p>
<ul>
<li><a href="/events/2/doctrine-for-beginners.html">Doctrine for Beginners</a> on June 25th by Jonathan Wage</li>
<li><a href="/events/3/getting-started-with-doctrine-mongodb-odm.html">Getting Started with Doctrine MongoDB ODM</a> on July 16th by Andreas Braun</li>
<li><a href="/events/1/php-internals-for-the-inquisitive-developer.html">PHP Internals for the Inquisitive Developer</a> on September 10th by Jeremy Mikola</li>
</ul>
<p>Don't see something that you are interested in? <a href="https://www.doctrine-project.org/events/suggest.html">Suggest</a> an event topic you would like to see and we will see what we can do. We will be publishing new events in the coming weeks so check back soon!</p>]]></content>
        </entry>
    </feed>
