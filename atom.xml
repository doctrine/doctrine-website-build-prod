<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Doctrine]]></title>
    <link href="https://www.doctrine-project.org/atom.xml" rel="self" />
    <link href="https://www.doctrine-project.org/" />
    <updated>2023-09-04T20:57:09-04:00</updated>
    <id>https://www.doctrine-project.org/</id>

            <entry>
            <title type="html"><![CDATA[Doctrine ORM Team Meetup in Bonn, Germany]]></title>
            <link href="https://www.doctrine-project.org/2023/08/21/doctrine-orm-team-meetup.html"/>
            <updated>2023-08-21T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2023/08/21/doctrine-orm-team-meetup.html</id>
            <author><name>Benjamin Eberlei</name></author>
            <content type="html"><![CDATA[<p>We are organizing a Doctrine ORM Core Team Meetup in Düsseldorf, Germany from Monday,
9.10.2023 to Wednesday, 11.10.2023 at the offices of one of our primary
sponsors Tideways GmbH.</p>
<p>The goal is to get the current team together, discuss and work on the missing
pieces for the long-awaited Doctrine ORM 3.0 release that is planned for later
this year.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[From annotations to attributes]]></title>
            <link href="https://www.doctrine-project.org/2022/11/04/annotations-to-attributes.html"/>
            <updated>2022-11-04T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2022/11/04/annotations-to-attributes.html</id>
            <author><name>Grégoire Paris</name></author>
            <content type="html"><![CDATA[<p>Last month, we migrated the tests of the ORM from annotations to attributes.
Let us look back on what lead to this moment.</p>
<h2>Annotations</h2>
<p>Let's go 22 years back in time. In October 2000, Ulf Wendel introduces phpdoc
comments at the PHP-Kongress. These comments follow a structure that allows
to produce API documentation from them. They are inspired by javadoc.</p>
<p>In 2002, Alex Buckley, a Specification lead for the Java language publishes
<a href="https://www.cs.ubc.ca/~gregor/teaching/cpsc411/metadata-public-draft.html">JSR-175</a>, thus proposing to add user-defined annotations to the
language, allowing to tag language elements with extra information. 2 years
later, it gets approved and Java 1.5, also known as Java 5 is released, <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/language/annotations.html">with
support for annotations</a>.</p>
<p>2 more years elapse and in 2004, Jano Suchal publishes <a href="https://github.com/jsuchal/addendum">Addendum</a>, a
PHP library that adds support for using &quot;Docblock/JavaDoc&quot; as annotations,
meaning that contrary to what is done in Java, Addendum annotations are
contained inside phpdoc comments, like this:</p>
<pre><code class="language-php">/** @test */
function test_it_throws_on_invalid_argument(): void
{}</code></pre>
<p>That is because they are implemented in userland, without requiring a change in
PHP itself.</p>
<p>Doctrine ORM 2.0 is not released yet at that point, but <a href="https://github.com/doctrine/orm/commit/bcf0110249978c8fc705916d5a4f94216bb98b07">the library is used to
build an annotation driver</a> in Doctrine 2 in early 2009.
At that time, Doctrine was a project in a single repository, with <code>Common</code>,
<code>DBAL</code> and <code>ORM</code> as top-level namespaces.
<a href="https://github.com/doctrine/orm/commit/9075f10bf5da3058f6ef82ff08e4783ff70424a4">Addendum is replaced 6 months later</a>, with a new namespace
under <code>Common</code> called <code>Annotations</code>.</p>
<p>In the summer of 2010, Guilherme Blanco and Pierrick Charron submit
<a href="https://wiki.php.net/rfc/annotations">an RFC to add annotations support to PHP</a>, but it
<a href="https://externals.io/message/49733">gets declined</a>. The RFC already mentions the
need for annotations in PHPUnit, Symfony, Zend Framework, FLOW3 and of course,
Doctrine.</p>
<p>Late 2010, Doctrine 2 is tagged, and the single repository is split into 3
repositories.</p>
<p>Finally, in 2013, the namespace above is isolated in its own repository, and
<code>doctrine/annotations</code> 1.0.0 is tagged.</p>
<p>Today, the package is widely used in the PHP ecosystem and has a little short
of 300 million downloads on Packagist, and is depended on by over 2 thousand
packages, including major frameworks and tools. It is fair to say annotations
have proven valuable to many users.</p>
<h2>Attributes</h2>
<p>The RFC mentioned above is only one among <a href="https://wiki.php.net/rfc">many</a>. As mentioned
before, annotations were implemented as phpdoc comments, which has several
drawbacks:</p>
<ul>
<li>The comments are necessary to run the code, and <a href="https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments">need to be kept in the
opcode cache</a>.</li>
<li>They are obtained at runtime, by using the reflection API, and because of
that, can only be detected as invalid at runtime.</li>
<li>They are not well supported by IDEs if at all.</li>
<li>They clutter comments, which were originally intended for humans.</li>
<li>They can be confused with phpdoc, which are something else entirely.</li>
</ul>
<p>In March 2020, Benjamin Eberlei resurrects <a href="https://wiki.php.net/rfc/attributes">Dmitry Stogov's attributes
RFC</a> and submits <a href="https://wiki.php.net/rfc/attributes_v2">the seventh RFC on this
topic</a>, introducing attributes to PHP.</p>
<p>A few rounds of RFCs about syntax later, PHP 8.0 is released, with a notable
feature missing: nested attributes. PHP 8.0 attributes use a syntax that is
forward-compatible with them though, and finally, with PHP 8.1, nested
attributes are supported.</p>
<h2>Migrating from one to the other</h2>
<p>Since attributes are much better than annotations, with <code>doctrine/orm</code> 3.0,
annotations will no longer be supported, which means applications using them as
a way to map entities to tables need to migrate towards attributes (or another
driver).
As maintainers of that library, even we needed to migrate: most of the test
suite of <code>doctrine/orm</code> used annotations.</p>
<p>Enter <a href="https://github.com/rectorphp/rector">Rector</a>. Rector is a standalone tool that is invaluable when it
comes to performing such migrations: it is able to understand PHP code and
apply so-called Rectors to it. It is extensible, so it is possible to define
such Rectors in order to address upgrades for anything, including Doctrine.</p>
<p>What's more, it comes with batteries included: when you install
<code>rector/rector</code>, what you get is code from <code>rector/rector-src</code> <em>and</em> its official
extensions, among which you will find <a href="https://github.com/rectorphp/rector-doctrine"><code>rector/rector-doctrine</code></a>.
That's right, there is already an entire extension dedicated to Doctrine.</p>
<p>Rules are grouped together in sets, and the set that interests us here is
<code>Rector\Doctrine\Set\DoctrineSetList::ANNOTATIONS_TO_ATTRIBUTES</code>.</p>
<p>To migrate <code>doctrine/orm</code>'s test suite to annotations, here is how we
proceeded:</p>
<ol>
<li>Install Rector: <code>composer require --dev rector/rector</code>.</li>
<li>
<p>Create a file called <code>rector.php</code> at the root of the library with the
following contents:</p>
<pre><code class="language-php">    &lt;?php

    declare(strict_types=1);

    use Rector\Config\RectorConfig;
    use Rector\Doctrine\Set\DoctrineSetList;

    return function (RectorConfig $rectorConfig): void {
        $rectorConfig-&gt;paths([
            __DIR__ . '/tests',
        ]);
        $rectorConfig-&gt;sets([
            DoctrineSetList::ANNOTATIONS_TO_ATTRIBUTES,
        ]);
    };</code></pre>
</li>
<li>Run <code>vendor/bin/rector</code>, which obeys the above configuration.</li>
<li>Uninstall Rector: <code>composer remove rector/rector &amp;&amp; rm rector.php</code></li>
<li>Run <code>vendor/bin/phpcbf</code> to make the migrated codebase compliant with our
coding standard.</li>
</ol>
<p>Or at least, it was the plan, because some annotations were not perfectly
migrated. All in all, I found only <a href="https://github.com/rectorphp/rector/issues/7528">2</a> <a href="https://github.com/rectorphp/rector-src/pull/2988">bugs</a>, which looks great
given how so many edge cases should appear in our test suite.</p>
<p>I went on and reported those 2 bugs, and this is where the experience went from
great to stellar:
the issue template leads to <a href="https://getrector.org/demo">a playground</a>, much like the one you can
find for other tools such as Psalm or PHPStan.</p>
<p>This one comes with 2 buttons: &quot;Create an issue&quot;, which pre-fills the Github
issue with useful information, and &quot;Create a test&quot;, that lets you create a test
in the right directory (and also, the right repository, which is
<code>rectorphp/rector-src</code>, and not <code>rectorphp/rector</code>).</p>
<p>If you want to add a new test for the bug you reported, you should let
<a href="https://github.com/rectorphp/rector/blob/main/docs/how_to_add_test_for_rector_rule.md">the official tutorial</a> walk you through that, it is very
well written.</p>
<p>Anyway, now that these 2 bugs are fixed and you know how to migrate, plan that
migration, and let us know how it goes! Happy Rectoring!</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine DBAL 3.4.0]]></title>
            <link href="https://www.doctrine-project.org/2022/08/06/dbal-3.4.0.html"/>
            <updated>2022-08-06T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2022/08/06/dbal-3.4.0.html</id>
            <author><name>Sergei Morozov</name></author>
            <content type="html"><![CDATA[<p>Doctrine is proud to announce the release of Doctrine DBAL 3.4.0. Below is a summary of the most noteworthy changes
in the new release:</p>
<h2>Database schema introspection optimization (<a href="https://github.com/doctrine/dbal/pull/5268">#5268</a>)</h2>
<p>Older DBAL versions, in order to introspect database schema, performed a set of queries for each table individually.
This caused noticeable performance issues on some platforms like Oracle which seemingly rebuild their internal views
for each such query.</p>
<p>As of this release, the entire schema is introspected in a fixed number of queries. The more tables the schema contains,
the more noticeable this optimization should be.</p>
<p>It was impossible to make these optimizations while using the schema introspection platform methods
(e.g. <code>getListTableColumnsSQL()</code>). As a result, although these methods are kept in the codebase for backward
compatibility, the DBAL itself no longer uses them. The SQL queries used for schema introspection are no longer
considered part of the public DBAL API.</p>
<h2>Support for foreign key constraints on SQLite (<a href="https://github.com/doctrine/dbal/pull/5427">#5427</a>)</h2>
<p>Although SQLite has supported foreign key constraints since its earliest versions, their support in the DBAL
was quite limited. One of the reasons for that was that managing foreign key constraints in SQLite is quite different
from the rest of the supported platforms.</p>
<p>For example, when a foreign key constraint is declared, platforms like MySQL require that the referenced table
must already exist. To support creating tables with mutually referencing constraints, the DBAL would
create the tables first and create the constraints via <code>ALTER TABLE … ADD FOREIGN KEY …</code>.</p>
<p>This approach doesn't work with SQLite since it doesn't allow adding constraints to an existing table. Fortunately,
it doesn't require the referenced table to exist at the time of creating the foreign key either.</p>
<p>The new DBAL release introduces a new API for building <code>CREATE TABLE</code> and <code>DROP TABLE</code> statements for multiple tables
which could be tailored to the requirements of a given platform. The <code>AbstractPlatform::supportsForeignKeys()</code> method
is now deprecated since the DBAL supports foreign key constraints on all supported platforms.</p>
<h2>Support for TEXT/BLOB default values on MariaDB (<a href="https://github.com/doctrine/dbal/pull/5332">#5332</a>)</h2>
<p>The platform layer in the DBAL is organized in the way that the code implementing the support for MySQL is also
used to support MariaDB. As a result, even though MariaDB may support certain features the DBAL doesn't support them
because they are not supported by MySQL. One of such features is the default values for TEXT and BLOB columns.</p>
<p>As of the new release, the default TEXT and BLOB values are supported on MariaDB but are still unsupported on MySQL,
even though MySQL supports them as of
release <a href="https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-13.html#mysqld-8-0-13-data-types">8.0.13</a>.</p>
<h2>Support for result caching in QueryBuilder (<a href="https://github.com/doctrine/dbal/pull/5539">#5539</a>)</h2>
<p>The recently added <code>enableResultCache()</code> method of the <code>QueryBuilder</code> class allows specifying the query cache profile
to be used for performing the queries built by the builder.</p>
<h2>PHP 7.4 or newer is required (<a href="https://github.com/doctrine/dbal/pull/5459">#5459</a>)</h2>
<p>The DBAL no longer supports PHP 7.3 since its support by the community ended last year. The codebase now
actively uses such features of PHP 7.4 as
<a href="https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters">covariant return types</a>
and <a href="https://wiki.php.net/rfc/typed_properties_v2">typed properties</a>.</p>
<h2>Deprecations</h2>
<p>In light of the DBAL 4 release planned for later this year, the 3.4.0 release introduces over 30 deprecations which,
as usual, focus on cleaning up obsolete features and making the API more robust and clearer from the
static analysis standpoint.</p>
<p>To learn more about upgrading your application, see the
<a href="https://github.com/doctrine/dbal/blob/3.4.0/UPGRADE.md#upgrade-to-34">upgrade notes</a>. You can find the full
list of changes in the release <a href="https://github.com/doctrine/dbal/milestone/107">milestone</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[On Doctrine Sponsoring with the help of OpenCollective]]></title>
            <link href="https://www.doctrine-project.org/2022/03/24/opencollective.html"/>
            <updated>2022-03-24T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2022/03/24/opencollective.html</id>
            <author><name>Benjamin Eberlei</name></author>
            <content type="html"><![CDATA[<p>To simplify our own administrative burden, we have decided to move over the
funds to <a href="https://opencollective.com/doctrine">OpenCollective</a>, primarily
motivated by the success and positive experience of the new PHP Foundation.</p>
<p>We have started raising money for the Doctrine Project in 2019 through Patreon and
Github Sponsors to support the project. It was planned to organize core team
get-togethers/hackathons, but due to the pandemic we haven't been able to do this.
In addition the legal and tax implications of raising money also caused us
some headaches. </p>
<p>The move to OpenCollective will allow us to delegate much of the administrative
work to them for a small percentage of the raised capital. The fee is a much
smaller amount than the taxes that we had to pay on the raised money
previously, so it is a win-win for us.</p>
<p>We want to assure our sponsors that we still plan to make use of the funds
to further the Doctrine project and we are actively looking to increase our funding
for these goals:</p>
<ul>
<li>
<p>Regularly organize hackathons for Doctrine Core team contributors, including
3-4 days of accommodation, food and travel for roughly 10-15 people.</p>
</li>
<li>
<p>Infrastructure, servers and hosting.</p>
</li>
<li>
<p>Marketing material such as stickers, t-shirts and other small things.</p>
</li>
<li>
<p>If the budget increases significantly we might be able to pay someone part-
or full-time to do maintenance work such as responding to and processing
issues, prepare for new PHP releases and general cleanups of the codebase.</p>
</li>
</ul>
<p>As such we hope to convince you to sponsor Doctrine through either our <a href="https://github.com/sponsors/doctrine/">Github
Sponsors</a> or
<a href="https://opencollective.com/doctrine">OpenCollective</a> directly.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Sunsetting Doctrine DBAL 2]]></title>
            <link href="https://www.doctrine-project.org/2022/01/22/sunsetting-dbal-2.html"/>
            <updated>2022-01-22T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2022/01/22/sunsetting-dbal-2.html</id>
            <author><name>Sergei Morozov</name></author>
            <content type="html"><![CDATA[<p>Since the release of <a href="https://github.com/doctrine/dbal/releases/tag/3.0.0">Doctrine DBAL 3.0.0 </a> in November 2020,
the 2.x release series effectively went into the maintenance mode. In the past year, we've been accepting mostly
the following types of patches for DBAL 2:</p>
<ol>
<li>Development dependency updates</li>
<li>Security fixes</li>
<li>Improvements to compatibility with PHP 8.1</li>
<li>Improvements in the upgrade path to DBAL 3</li>
</ol>
<p>Except for dependency updates, at the moment, there are no known issues in DBAL 2 that would fall into any of
the above categories.</p>
<p>Many projects that depend on Doctrine DBAL depend on it indirectly via Doctrine ORM which until
<a href="https://github.com/doctrine/orm/releases/tag/2.10.0">release 2.10.0</a> didn't support DBAL 3.
It was one of the blockers of the DBAL 3 adoption which is no longer the case.</p>
<p>With all that said, the DBAL team announces the plan for sunsetting DBAL 2 in 6 months as of the ORM 2.10.0 release
which is April 3, 2022. After that date, we plan to release DBAL 2 only to address security related
and other critical issues for at most a year.</p>
<p>All Doctrine DBAL users are encouraged to upgrade to the latest stable version
which is <a href="https://github.com/doctrine/dbal/releases/tag/3.3.0">3.3.0</a> as of the time of this writing.</p>
<p>For migrating from DBAL 2 to 3, see our two blog posts on DBAL 2.13 Forward Compatibility Layer:</p>
<ul>
<li><a href="https://www.doctrine-project.org/2021/03/29/dbal-2.13.html">New Release: Doctrine DBAL 2.13 with Deprecations and Forward Compatibility</a></li>
<li><a href="https://www.doctrine-project.org/2021/04/19/dbal-2.13.1-3.1.0.html">New Release: Doctrine DBAL 2.13.1 and 3.1.0 with important Forward Compatibility fix</a></li>
</ul>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine ORM 2.11 with Enums, Virtual Columns, Read-Only Properties, Nested Attributes and more]]></title>
            <link href="https://www.doctrine-project.org/2022/01/11/orm-2.11.html"/>
            <updated>2022-01-11T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2022/01/11/orm-2.11.html</id>
            <author><name>Benjamin Eberlei</name></author>
            <content type="html"><![CDATA[<p>We have released a new minor version 2.11 of Doctrine ORM with several improvements
and new features.</p>
<p><a href="https://github.com/doctrine/orm/releases/tag/2.11.0">See all changes and contributors in the
Changelog</a> on Github.</p>
<p>This blog post gives an overview over all the new features and improvements
that are user facing. Please see the changelog and UPGRADE notes for new
deprecations.</p>
<h2>PHP 8.1 Enum Support</h2>
<p>With PHP 8.1 the language has first class support for enumerations and Doctrine
ORM 2.11 supports the mapping of database values to <a href="https://www.php.net/manual/en/language.enumerations.backed.php">Backed
Enums</a>.</p>
<p>The support is not integrated on DBAL Type level, but using a new mapping option
called <code>enumType</code> on column/field declaration level:</p>
<pre><code class="language-php">enum Suit: string {
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';
}

#[Entity]
class Card
{
    /** ... */

    #[Column(type: 'string', enumType: Suit::class)]
    public $suit;
}</code></pre>
<h2>Virtual and Generated Columns</h2>
<p>There has been constant demand for this feature for a long time, to add support
for columns that are not insertable/updatable and might have their value
updated on the database side.</p>
<p>We have worked along the lines of Java Persistence API support of <code>insertable</code>,
<code>updatable</code> and <code>generated</code> options for field mappings.</p>
<p>There are two major use cases for this:</p>
<ol>
<li>Map a column several times, for example with join columns:</li>
</ol>
<pre><code class="language-php">#[Entity]
class User
{
     #[ManyToOne(targetEntity: Country:class), JoinColumn(name: "country_code", referencedColumnName: "country_code")]
     public $country;

     #[Column(type: "string", name: "country_code", insertable: false, updatable: false)]
     public $countryCode;
}</code></pre>
<ol start="2">
<li>Columns updated by the database</li>
</ol>
<pre><code class="language-php">#[Entity]
class Article
{
    #[Column(type: "datetime",
        columnDefinition: "TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP",
        insertable: false,
        updatable: false,
        generated: "ALWAYS")]
    public $created;
}</code></pre>
<h2>Support for Readonly Properties</h2>
<p>Another PHP 8.1 feature is the new readonly keyword that prevents the value of
a property to be written again after it has been initialized in the constructor
of an object.</p>
<p>With ORM 2.11 the support now works as you would expect with no additional
mapping options necessary:</p>
<pre><code class="language-php">#[Entity, Table(name: 'author')]
class Author
{
    #[Column, Id, GeneratedValue]
    private readonly int $id;

    #[Column]
    private readonly string $name;
}</code></pre>
<h2>AssociationOverrides and AttributeOverrides in Attribute Driver</h2>
<p>The new <code>AttributeDriver</code> for PHP 8 did not support the equivalent mapping
options for association and attribute overrides that are available for XML and
Annotation mapping, because in PHP 8.0 it was not possible to nest complex
attributes. </p>
<p>With the support now available in PHP 8.1 we have added these attributes.</p>
<pre><code class="language-php">&lt;?php
use Doctrine\ORM\Mapping\AssociationOverride;
use Doctrine\ORM\Mapping\AssociationOverrides;
use Doctrine\ORM\Mapping\AttributeOverride;
use Doctrine\ORM\Mapping\AttributeOverrides;
use Doctrine\ORM\Mapping\Column;
use Doctrine\ORM\Mapping\Entity;

#[AssociationOverrides([
    new AssociationOverride(
        name: "groups",
        joinTable: new JoinTable(
            name: "ddc964_users_admingroups",
        ),
        joinColumns: [new JoinColumn(name: "adminuser_id")],
        inverseJoinColumns: [new JoinColumn(name: "admingroup_id")]
    )
])]
#[AttributeOverrides([
    new AttributeOverride(
        name: "id",
        column: new Column(name: "guest_id", type: "integer", length: 140)
    )])]
class DDC964Admin extends DDC964User
{
}</code></pre>
<p>For PHP 8.0 we have already moved <code>Index</code> and <code>JoinColumn</code> mappings to the top
level to avoid nesting and decided not to allow nesting for these to mimic
annotation support.</p>
<h2>Allow arithmetic expressions within IN operator</h2>
<p>It is now possible to use arithmetic expressions or functions inside the IN operator:</p>
<pre><code class="language-sql">SELECT u FROM User u WHERE u.id IN (1 + 1, FOO(u.id))</code></pre>
<h2>Ignore entity classes in schema tool</h2>
<p>You can now specify Entity FQCNs to ignore during schema tool creation and comparison.
<code>SchemaTool</code> will then skip these (e.g. when comparing schemas).</p>
<pre><code class="language-php">&lt;?php
$config-&gt;setSchemaIgnoreClasses([$fqcn]);
$config-&gt;getSchemaIgnoreClasses();</code></pre>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine MongoDB ODM 2.3 with Attributes, JSON Schema Validation, and more]]></title>
            <link href="https://www.doctrine-project.org/2021/12/04/mongodb-odm-2.3.html"/>
            <updated>2021-12-04T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/12/04/mongodb-odm-2.3.html</id>
            <author><name>Ion Bazan</name></author>
            <content type="html"><![CDATA[<p>We have released a new minor version 2.3 of Doctrine MongoDB ODM, the first version
with support for using PHP 8 Attributes as a new driver for mapping documents
and several other changes. <a href="https://github.com/doctrine/mongodb-odm/releases/tag/2.3.0">See all changes and contributors in the
Changelog</a> on GitHub.</p>
<h2>Attributes Mapping Driver</h2>
<p>The following code example shows many of the mappings that are re-using
the annotation classes for familiarity:</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Doctrine\ODM\MongoDB\Types\Type;

#[MongoDB\Document(repositoryClass: PostRepository::class)]
class Post
{
    #[MongoDB\Id]
    private string $id;

    #[MongoDB\Field(type: Type::BOOLEAN)]
    private bool $published = false;

    #[MongoDB\Field(type: Types::COLLECTION)]
    private array $text = [];

    #[MongoDB\ReferenceOne(targetDocument: User::class)]
    public $author;

    #[MongoDB\ReferenceMany(targetDocument: Tag::class)]
    public Collection $tags;
}</code></pre>
<p>You may want to use <a href="https://getrector.org/">Rector</a> with <code>DoctrineSetList::DOCTRINE_ODM_23</code> set
to convert all your annotation mappings to attributes in seconds!</p>
<h2>JSON Schema Validation</h2>
<p>MongoDB ≥ 3.6 offers the capability to validate documents during
insertions and updates through a JSON schema associated with the collection.
<a href="https://docs.mongodb.com/manual/core/schema-validation/">See MongoDB documentation</a>.</p>
<p>Doctrine MongoDB ODM now provides a way to take advantage of this functionality thanks to the new
<a href="https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/annotations-reference.html#validation"><code>#[Validation]</code></a> mapping.</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Mapping\Annotations as MongoDB;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

#[MongoDB\Document]
#[MongoDB\Validation(
    validator: SchemaValidated::VALIDATOR,
    action: ClassMetadata::SCHEMA_VALIDATION_ACTION_WARN
)]
class SchemaValidated
{
    public const VALIDATOR = &lt;&lt;&lt;'EOT'
{
    "$jsonSchema": {
        "required": ["name"],
        "properties": {
            "name": {
                "bsonType": "string",
                "description": "must be a string and is required"
            }
        }
    },
    "$or": [
        { "phone": { "$type": "string" } },
        { "email": { "$regex": { "$regularExpression" : { "pattern": "@mongodb\\.com$", "options": "" } } } },
        { "status": { "$in": [ "Unknown", "Incomplete" ] } }
    ]
}
EOT;
}
</code></pre>
<p>Once defined, those options will be added to the collection after running
the <code>odm:schema:create</code> or <code>odm:schema:update</code> command.</p>
<h2>Psalmified APIs</h2>
<p>In-code documentation has been immensely improved to make sure static analysis tools and IDEs know
about the right document classes returned from <code>DocumentManager</code>,
<code>ClassMetadata</code>, and other public APIs. This includes generics support
for your own repositories extending <code>DocumentRepository</code>.</p>
<pre><code class="language-php">use Doctrine\ODM\MongoDB\Repository\DocumentRepository;
use App\Document\User;

/**
 * @template-extends DocumentRepository&lt;User&gt;
 */
class UserRepository extends DocumentRepository
{
}</code></pre>
<h2>Deprecations</h2>
<p>Doctrine MongoDB ODM 2.3 introduces several minor deprecations:</p>
<ul>
<li>The <code>Doctrine\ODM\MongoDB\Proxy\Resolver\ClassNameResolver</code> interface has been deprecated in favor
of the <code>Doctrine\Persistence\Mapping\ProxyClassNameResolver</code> interface</li>
<li>Annotation classes no longer extend <code>Doctrine\Common\Annotations\Annotation</code> class</li>
<li>Annotation arguments switched to <code>@NamedArgumentConstructor</code> for Attribute compatibility</li>
<li><code>@Inheritance</code> annotation has been removed as it was never used</li>
<li>Document Namespace Aliases (<code>'MyBundle:User</code>) - use fully qualified class names instead (<code>User::class</code>)</li>
</ul>
<p>Read more in our <a href="https://github.com/doctrine/mongodb-odm/blob/2.3.x/UPGRADE-2.3.md">upgrading</a> document. </p>
<h2>Coding Standard Support</h2>
<p>Doctrine MongoDB ODM 2.3 now supports and fully validates against Doctrine Coding
Standard version 9.0+. This greatly improves automatic pull request checks as
all new violations in a PR get caught and inlined into the PR as comments.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine DBAL 3.2.0]]></title>
            <link href="https://www.doctrine-project.org/2021/11/26/dbal-3.2.0.html"/>
            <updated>2021-11-26T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/11/26/dbal-3.2.0.html</id>
            <author><name>Sergei Morozov</name></author>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine DBAL 3.2.0. As most of the minor releases, this one
focuses on new features, improvements and deprecations of the old APIs. Here are some details on the most significant
features and improvements:</p>
<h2>Platform-aware schema comparison (<a href="https://github.com/doctrine/dbal/pull/4746">#4746</a>)</h2>
<p>Up until this release, the logic of comparing database schemas had a major design flaw: it took into account only the
abstract schema definitions without taking the target platform into account.</p>
<p>This flaw would lead to multiple issues which shared the same root cause: the two definitions could be considered
different by the DBAL, but they would produce the same DDL.</p>
<p>For instance, consider the two column definitions:</p>
<pre><code class="language-php">// old schema
$column1 = new Column('contents', Type::getType('text'));

// new schema
$column2 = new Column('contents', Type::getType('text'), ['default' =&gt; 'Hello, world!']);</code></pre>
<p>If we compared them with the comparator, we'd get a diff:</p>
<pre><code class="language-php">$comparator = new Comparator();
$comparator-&gt;diffColumn($column1, $column2);
// array(1) {
//   [0] =&gt;
//   string(7) "default"
// }</code></pre>
<p>This might be valid for the platforms that support the <code>DEFAULT</code>  constraint on <code>TEXT</code> columns but isn't valid for those
that don't support it (e.g. MySQL). Regardless of the diff, both definitions would produce the same DDL on MySQL:</p>
<pre><code class="language-sql">contents LONGTEXT NOT NULL</code></pre>
<p>An attempt to migrate the old schema to the new one would produce a false-positive diff but applying it wouldn't result
in any schema changes.</p>
<p>A false-negative diff was also possible. Consider these following example:</p>
<pre><code class="language-php">// old schema
$column1 = new Column('settings', Type::getType('json'));

// new schema
$column2 = new Column('settings', Type::getType('json'), ['length' =&gt; 16777215]);</code></pre>
<p>Comparison of the above column definitions should have triggered a diff on MySQL and migrate the underlying column
from <code>TEXT</code> to <code>MEDIUMTEXT</code> but it didn't, because the DBAL would ignore the length of the <code>TEXT</code> columns.</p>
<p>Apart from that, the DBAL would compare only a subset of the definitions, so some column options as the character set
and collation weren't taken into account during comparison at all.</p>
<h3>The new approach</h3>
<p>Instead of comparing abstract definitions on a per-property basis, the new implementation compares the DDL that is generated from both definitions for the target database platform. If the definitions produce the same DDL, they are considered equal. According to the tests and the number of resolved issues, this approach should be more accurate and less error-prone.</p>
<p>Implementing this approach was impossible without introducing a new API which rendered the existing API obsolete.</p>
<p>Prior to DBAL <code>3.2.0</code>, the schema comparator could be only instantiated directly via the <code>new</code> keyword:</p>
<pre><code class="language-php">$comparator = new Comparator();</code></pre>
<p>Instantiated like this, the comparator doesn't have a notion of the target database platform and cannot perform the comparison properly. That is why, this way of instantiation is deprecated in favor of instantiating the comparator by the schema manager:</p>
<pre><code class="language-php">$schemaManager = $connection-&gt;createSchemaManager();
$comparator = $schemaManager-&gt;createComparator();</code></pre>
<p>This way, the schema manager can instantiate a platform-specific comparator and provide it with the necessary context (e.g. the default collation used by the database).</p>
<p>While the old API is still available, it is recommended to use the new API for more accurate comparison.</p>
<h2>Support for <code>psr/cache</code> (<a href="https://github.com/doctrine/dbal/pull/4620">#4620</a>)</h2>
<p>Since the Doctrine Cache library is being sunset, the new DBAL release introduced the ability to use a PSR-6 compatible implementation for result caching.</p>
<p>While both the <code>doctrine/cache</code> and <code>psr/cache</code> APIs will be supported until the next major DBAL release, we recommend users to switch to a PSR-6 compatible implementation in their projects.</p>
<h2>Support for <code>psr/log</code> (<a href="https://github.com/doctrine/dbal/pull/4967">#4967</a>)</h2>
<p>The <code>SQLLogger</code> interface was designed long ago and has certain limitations: there is no way to log messages at different logger levels and it is really challenging to extend the logger functionality without introducing breaking API changes.</p>
<p>The new DBAL release introduces a new middleware that can delegate logging to a PSR-3 compatible implementation.</p>
<p>Note that the new logger won't produce the messages identical to the ones produced by the old one. If you have any processes built around analysing log messages, you may need to make some changes before adopting the new API.</p>
<h2>Always cache the full result (<a href="https://github.com/doctrine/dbal/pull/5003">#5003</a>)</h2>
<p>The implementation of the result cache prior to DBAL 3.2.0 would store the result set in the cache only once it was fetched completely. It led to the following issues:</p>
<ol>
<li>If the result isn't yet cached and its consumer didn't fetch it completely, the query would be executed again.</li>
<li>In case of a cache miss, the DBAL would <code>get()</code> the cache entry twice: once to fetch the data and once to merge the just fetched result with other results that may be stored in the cache.</li>
</ol>
<p>The new implementation stores the results in the cache right after they were fetched. It simplifies the caching layer significantly and makes its behavior more straightforward.</p>
<h2>Add events for Transaction begin/commit/rollback (<a href="https://github.com/doctrine/dbal/pull/4622">#4622</a>)</h2>
<p>The new DBAL version introduces three more transaction-related events:</p>
<ul>
<li><code>onTransactionBegin</code>,</li>
<li><code>onTransactionCommit</code>,</li>
<li><code>onTransactionRollBack</code>.</li>
</ul>
<p>Subscribing to those might be helpful if the application logic integrates the database transaction flow with the business logic implemented outside the database. For instance, in the filesystem.</p>
<h2>Basic exception handling in IBM DB2 and SQL Server drivers (<a href="https://github.com/doctrine/dbal/pull/4929">#4929</a>, <a href="https://github.com/doctrine/dbal/pull/4928">#4928</a>)</h2>
<p>The DBAL provides a mechanism that converts driver-specific error codes to portable error-specific exceptions. For instance an attempt to insert <code>NULL</code> into a column that has a <code>NOT NULL</code> constraint applied will result in error with the code <code>1566</code> on MySQL and in <code>ORA-01400</code> on Oracle. The DBAL will convert these two errors to a portable <code>NotNullConstraintViolationException</code>.</p>
<p>Historically, the DBAL drivers based on the <code>ibm_db2</code>, <code>sqlsrv</code> and <code>pdo_sqlsrv</code> extensions did not support this feature and would thow a generic <code>DriverException</code>.</p>
<p>As of DBAL 3.2.0, this feature is supported by all bundled drivers.</p>
<h2>Improved <code>AbstractPlatform::getLengthExpression()</code> (<a href="https://github.com/doctrine/dbal/pull/4855">#4855</a>)</h2>
<p>Although the <code>LENGTH</code> expression was implemented for all supported database platforms, the different implementations didn't have consistent semantics:</p>
<ol>
<li>Most implementations would return the length in characters (Unicode code points), which is the most expected behavior.</li>
<li>The implementations for MySQL and IBM DB2 would return the number of bytes. It worked fine for the strings that consisted only of the ANSI characters, but an attempt to use it with a wider range of characters would produce an unexpected result. For instance, the length of the string  <code>'Привет, мир!'</code> might be reported as <code>19</code> instead of <code>12</code>.</li>
</ol>
<p>As of DBAL 3.2.0, all platforms return the length in Unicode points according to the character set used by the database connection. Note, SQL Server supports UTF-8 only as of SQL Server 2019.</p>
<p>You can find more details in the <a href="https://github.com/doctrine/dbal/releases/tag/3.2.0">release notes</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[DBAL 3 SQL Injection Security Vulnerability fixed (CVE-2021-43608)]]></title>
            <link href="https://www.doctrine-project.org/2021/11/11/dbal3-vulnerability-fixed.html"/>
            <updated>2021-11-11T00:00:00-05:00</updated>
            <id>https://www.doctrine-project.org/2021/11/11/dbal3-vulnerability-fixed.html</id>
            <author><name>Benjamin Eberlei</name></author>
            <content type="html"><![CDATA[<p>We have released a new version Doctrine DBAL 3.1.4 that fixes a critical SQL
injection vulnerability in the LIMIT clause generation API provided by the
Platform abstraction.</p>
<p>We advise everyone using Doctrine DBAL 3.0.0 up to 3.1.3 to upgrade to 3.1.4
immediately. </p>
<p>The vulnerability can happen when unsanitized input is passed to many APIs in
Doctrine DBAL and ORM that ultimately end up calling
<code>AbstractPlatform::modifyLimitQuery</code>.</p>
<p>As a workaround you can cast all limit and offset parameters to integers before
passing them to Doctrine APIs.</p>
<p>This vulnerability has been assigned
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43608">CVE-2021-43608</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Release: Doctrine ORM 2.9 with Attributes, Typed Properties, more]]></title>
            <link href="https://www.doctrine-project.org/2021/05/24/orm2.9.html"/>
            <updated>2021-05-24T00:00:00-04:00</updated>
            <id>https://www.doctrine-project.org/2021/05/24/orm2.9.html</id>
            <author><name>Benjamin Eberlei</name></author>
            <content type="html"><![CDATA[<p>We have released a new minor version 2.9 of Doctrine ORM, the first version
with support for using PHP 8 Attributes as a new driver for mapping entities
and several other changes. <a href="https://github.com/doctrine/orm/releases/tag/2.9.0">See all changes and contributors in the
Changelog</a> on Github.</p>
<h2>Attributes Mapping Driver</h2>
<p>The following code example shows many of the mappings that are re-using
the annotation classes for familiarity:</p>
<pre><code class="language-php">use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity(repositoryClass: PostRepository::class)]
class Post
{
    #[ORM\Column(type: Types::INTEGER)]
    #[ORM\Id, ORM\GeneratedValue(strategy: 'AUTO')]
    private ?int $id;

    #[ORM\Column(type: Types::BOOLEAN)]
    private bool $published = false;

    #[ORM\Column(type: Types::SIMPLE_ARRAY)]
    private array $text = [];

    #[ORM\ManyToOne(targetEntity: User::class)]
    public $author;

    #[ORM\ManyToMany(targetEntity: Tag::class)]
    #[ORM\JoinTable(name: "post_tags")]
    #[ORM\JoinColumn(name: "post_id", referencedColumnName: "id")]
    #[ORM\InverseJoinColumn(name: "tag_id", referencedColumnName: "id")]
    public Collection $tags;
}</code></pre>
<h2>Typed Property Defaults</h2>
<p>Since PHP 7.4 types can be declared on class properties and Doctrine now
uses these type declarations to reduce amount of mapping boilerplate:</p>
<ul>
<li>Columns don't need the type definitions</li>
<li>ManyToOne and OneToOne don't need target entity definitions</li>
</ul>
<p>Example:</p>
<pre><code class="language-php">use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity(repositoryClass: UserRepository::class)]
class User
{
    #[ORM\Id, ORM\Column, ORM\GeneratedValue]
    public ?int $id = null;

    #[ORM\Column]
    public \DateTime $created;

    #[ORM\ManyToOne]
    public Email $email;
}</code></pre>
<h2>Psalmified APIs</h2>
<p>Improved the documentation to make sure static analysis tools and IDEs know
about the right entity classes returned from <code>EntityManager</code>,
<code>EntityRepository</code> and other public ORM APIs. This includes generics support
when you extend <code>EntityRepository</code>.</p>
<pre><code class="language-php">use Doctrine\ORM\EntityRepository;
use App\Entity\User;

/**
 * @template-extends EntityRepository&lt;User&gt;
 */
class UserRepository extends EntityRepository
{
}</code></pre>
<h2>Query::HINT_READ_ONLY</h2>
<p>A new query hint is added that allows hydrating entities through DQL that are
marked as read only for the unit of work session, as long as they are not yet
loaded as writeable:</p>
<pre><code class="language-php">$dql = 'SELECT u FROM ' . ReadOnlyEntity::class . ' u WHERE u.id = ?1';

$query = $entityManager-&gt;createQuery($dql);
$query-&gt;setParameter(1, $user-&gt;id);
$query-&gt;setHint(Query::HINT_READ_ONLY, true);

$user = $query-&gt;getSingleResult();</code></pre>
<h2>Index/UniqueConstraints using Field Names</h2>
<p>Instead of specifying column names for an index or unique-constraint declaration
you can now alternatively use field names.</p>
<pre><code class="language-php">
use Doctrine\ORM\Mapping AS ORM;

#[ORM\Entity]
#[ORM\Index(fields: ["isPublished"])]
class Post
{
    #[ORM\Column]
    public bool $isPublished = false;
}</code></pre>
<p>This simplifies mapping as the column names passed through the naming strategy
do not need to be known.</p>
<h2>INDEX BY Associations</h2>
<p>Previously DQL <code>INDEX BY</code> was not possible for assocations, now you can:</p>
<pre><code class="language-php">$dql = 'SELECT p, u FROM Post INDEX BY p.author JOIN p.author u WHERE p.id = 3';</code></pre>
<h2>Deprecations</h2>
<p>Doctrine ORM 2.9 rethinks deprecations and integrates with our new
<a href="https://github.com/doctrine/deprecations/">doctrine/deprecations</a> library.</p>
<ul>
<li>Undeprecate <code>merge()</code> and <code>detach()</code> as no replacements are available yet</li>
<li>Notify Persist Change Tracking: Use Explicit Change Tracking instead</li>
<li>DQL <code>SELECT PARTIAL</code> syntax, use Value Objects with <code>SELECT NEW</code> instead</li>
<li><code>EntityManager::flush()</code> with arguments</li>
<li><code>EntityManager::clear()</code> with arguments (use detach)</li>
<li>Named Queries in Mapping (use Repository)</li>
<li><code>cli-config.php</code> for console command configuration, inject <code>EntityManagerProvider</code> instead.</li>
<li>Deprecate <code>doctrine/cache</code> for metadata caching, use PSR-6 cache instead</li>
</ul>
<h2>Cache Deprecations and PSR-6</h2>
<p>Over the next versions we will deprecate use of doctrine/cache and replace it
with PSR-6. If you are still using doctrine/cache code in your own application
make sure to force the versions to &quot;^1.10&quot; in composer.json.
<a href="https://github.com/doctrine/cache/issues/354">Details</a></p>
<h2>PHP 7.1 Support</h2>
<p>ORM 2.9 reintroduces PHP 7.1 support, because it wasn't technically unsupported
anyways.  No changes were necessary to the code to allow it again except in the
testsuite.</p>
<p>The PHP 7.1 support was re-added to allow a very broad approach to prepare for
some of the deprecations that are introduced in ORM 2 and will be removed in
version 3.0.</p>
<h2>Coding Standard Support</h2>
<p>Doctrine ORM 2.9 now supports and fully validates against Doctrine Coding
Standard version 9.0+. This greatly improves automatic pull request checks as
all new violations in a PR get caught and inlined into the PR as comments.</p>]]></content>
        </entry>
    </feed>
